image: python:3.7.4-alpine3.10

definitions:
  steps:
    - step: &build-step
        name: Build
        services:
          - docker
        image: atlassian/pipelines-awscli
        script: 
          - aws ecr get-login --no-include-email --region eu-west-1 > login.sh
          - sh login.sh
          - DOCKER_IMG=$AWS_REGISTRY_URL/$AWS_ECR_REPO:$BITBUCKET_COMMIT
          - export VALSYS_API_BUILD=test
          - docker build -t $DOCKER_IMG .
          - docker push $DOCKER_IMG

    - step: &unit-test-step
        name: Unit tests
        services:
          - docker
        image: atlassian/pipelines-awscli
        script:
          - aws ecr get-login --no-include-email --region eu-west-1 > login.sh
          - sh login.sh
          - DOCKER_IMG=$AWS_REGISTRY_URL/$AWS_ECR_REPO:$BITBUCKET_COMMIT
          - docker run -t $DOCKER_IMG make test
          - docker run -t $DOCKER_IMG /bin/bash -c "make coverage-ci"

    - step: &int-test-step
        name: Integration tests
        services:
          - docker
        image: atlassian/pipelines-awscli
        script:
          - aws ecr get-login --no-include-email --region eu-west-1 > login.sh
          - sh login.sh
          - DOCKER_IMG=$AWS_REGISTRY_URL/$AWS_ECR_REPO:$BITBUCKET_COMMIT
          - docker run -t $DOCKER_IMG /bin/bash -c "python main.py --inttests ${VALSYS_API_SOCKET} ${VALSYS_API_SERVER} ${VALSYS_API_USER} ${VALSYS_API_PASSWORD}"
pipelines:
  branches:
      default:
        - step: *build-step
        - step: *unit-test-step
        - step: *int-test-step
      master:
        - step: *build-step
        - step: *unit-test-step
        - step: *int-test-step
        - step:
            name: Deploy master to ECR
            services:
              - docker
            image: atlassian/pipelines-awscli
            script: 
              - aws ecr get-login --no-include-email --region eu-west-1 > login.sh
              - sh login.sh
              - DOCKER_IMG=$AWS_REGISTRY_URL/$AWS_ECR_REPO:master
              - export VALSYS_API_BUILD=test
              - docker build -t $DOCKER_IMG .
              - docker push $DOCKER_IMG
