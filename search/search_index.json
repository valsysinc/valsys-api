{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started Create a python virtual environment We recommended that you install the valsys library into a python virtual (local) environment, rather than into the global python environment. Below we assume that your version of python is version 3.8.16 . pyenv or virtualenv work well; other environment management systems are available. Installing the valsys package Now that you have an active virtual environment, install the valsys python package into your environment via pip install git + https : // github . com / valsysinc / valsys - api Any other packages you require (e.g., spark , or numpy ) will also need to be installed into the environment Environment setup To effectively use the library certain environment variables are required. To do anything, put the following into the command line export VALSYS_API_BUILD = local More environment variables are required; these can be set in two ways: first via login process which guides you through the process, secondly via directly setting environment variables (if you are unsure as to which applies to your situation, contact valsys support). Login Once the library has been installed, the first task is to login. From a python script (e.g., in the repl, or a jupyter notebook), execute 1 2 from valsys.admin import login login () It is useful to put the above into a local script called login.py or something of that nature. This will only need to be executed when you change your password (nothing bad will happen if you keep running - it will just wear thin). You will be prompted to enter the following information: Valsys host : the base part of the Valsys url (if unsure, contact valsys support) Valsys protocol : whether using http or https . Valsys username : this is the username used to login to the valsys system Valsys password : this is the password used to login to the valsys system The login process will attempt to authenticate with these pieces of information. Below we provide a screenshot of a jupyter notebook showing the expected screen and output. Environment variables If the login function does not works for your system, you will need to manually configure the following environment variables: VALSYS_API_BUILD : this is your company identifier (contact valsys support to find this value) VALSYS_API_SOCKET : the socket address (e.g., wss://dev-api.valsys.io ) VALSYS_API_SERVER : the http(s) server address (e.g., https://dev-api.valsys.io ) VALSYS_API_USER : the username used to log into the valsys system VALSYS_API_PASSWORD : the password used to log into the valsys system Your operating system or IDE will dictate the best method for setting these variables.","title":"Getting started"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#create-a-python-virtual-environment","text":"We recommended that you install the valsys library into a python virtual (local) environment, rather than into the global python environment. Below we assume that your version of python is version 3.8.16 . pyenv or virtualenv work well; other environment management systems are available.","title":"Create a python virtual environment"},{"location":"#installing-the-valsys-package","text":"Now that you have an active virtual environment, install the valsys python package into your environment via pip install git + https : // github . com / valsysinc / valsys - api Any other packages you require (e.g., spark , or numpy ) will also need to be installed into the environment","title":"Installing the valsys package"},{"location":"#environment-setup","text":"To effectively use the library certain environment variables are required. To do anything, put the following into the command line export VALSYS_API_BUILD = local More environment variables are required; these can be set in two ways: first via login process which guides you through the process, secondly via directly setting environment variables (if you are unsure as to which applies to your situation, contact valsys support).","title":"Environment setup"},{"location":"#login","text":"Once the library has been installed, the first task is to login. From a python script (e.g., in the repl, or a jupyter notebook), execute 1 2 from valsys.admin import login login () It is useful to put the above into a local script called login.py or something of that nature. This will only need to be executed when you change your password (nothing bad will happen if you keep running - it will just wear thin). You will be prompted to enter the following information: Valsys host : the base part of the Valsys url (if unsure, contact valsys support) Valsys protocol : whether using http or https . Valsys username : this is the username used to login to the valsys system Valsys password : this is the password used to login to the valsys system The login process will attempt to authenticate with these pieces of information. Below we provide a screenshot of a jupyter notebook showing the expected screen and output.","title":"Login"},{"location":"#environment-variables","text":"If the login function does not works for your system, you will need to manually configure the following environment variables: VALSYS_API_BUILD : this is your company identifier (contact valsys support to find this value) VALSYS_API_SOCKET : the socket address (e.g., wss://dev-api.valsys.io ) VALSYS_API_SERVER : the http(s) server address (e.g., https://dev-api.valsys.io ) VALSYS_API_USER : the username used to log into the valsys system VALSYS_API_PASSWORD : the password used to log into the valsys system Your operating system or IDE will dictate the best method for setting these variables.","title":"Environment variables"},{"location":"dataModels/","text":"Data models classDiagram class Model{ String uid List~Case~ cases List~String~ tags Case first_case pull_module(module_id) Module pull_line_item(line_item_id) LineItem } class Case{ String uid String case List~Module~ modules Module first_module } class Module{ String uid String name List~LineItem~ line_items List~Module~ child_modules find_module_by_id(module_id) Module } classDiagram class LineItem{ String uid String name List~Fact~ facts List~String~ tags Bool facts_tracked pull_fact_by_id(fact_id) Fact } class Fact{ String uid String identifier String formula String period String value String fmt Bool numeric }","title":"Data models"},{"location":"dataModels/#data-models","text":"classDiagram class Model{ String uid List~Case~ cases List~String~ tags Case first_case pull_module(module_id) Module pull_line_item(line_item_id) LineItem } class Case{ String uid String case List~Module~ modules Module first_module } class Module{ String uid String name List~LineItem~ line_items List~Module~ child_modules find_module_by_id(module_id) Module } classDiagram class LineItem{ String uid String name List~Fact~ facts List~String~ tags Bool facts_tracked pull_fact_by_id(fact_id) Fact } class Fact{ String uid String identifier String formula String period String value String fmt Bool numeric }","title":"Data models"},{"location":"exposedFunctions/","text":"Exposed modeling functions A useful subset of modeling functions have been exposed. To access them, import via 1 from valsys.modeling.service import X For example, from valsys.modeling.service import tag_model . The exposed functions are listed out below. If a number of imports are expected to be used, in order to not explode the number of imports, it may be useful to import and alias the entire modeling service via 1 import valsys.modeling.service as Modeling In which case functions are used via 1 2 Modeling . tag_model ( ... ) Modeling . filter_user_models ( ... ) in which we used a placeholder for the correct function arguments. Model operations Model pulling 1 pull_model ( model_id ) Pull a model by its ID. Parameters: Name Type Description Default model_id str the ID of the required model. required Returns: Type Description Model The Model object for the model. Source code in valsys/modeling/service.py 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 def pull_model ( model_id : str ) -> Model : \"\"\"Pull a model by its ID. Args: model_id: the ID of the required model. Returns: The `Model` object for the model. \"\"\" client = new_client () resp = client . get ( url = VSURL . PULL_MODEL , headers = { Headers . MODEL_ID : model_id }, ) check_success ( resp , 'pull model' ) return Model . from_json ( resp . get ( Resp . DATA ) . get ( Resp . MODEL )) Model tagging 1 tag_model ( model_id : str , tags : List [ str ]) Tag the model with model_id with the list of tags . Note that this removes any existing tags; if you wanted to append tags, use the append_tags function. update: turns on dynamic updates Parameters: Name Type Description Default model_id str ID of the model to add tags to required tags List [ str ] List of tags to add to the model required auth_token str Optional authentication token None Source code in valsys/modeling/service.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 def tag_model ( model_id : str , tags : List [ str ], auth_token : str = None ): \"\"\"Tag the model with `model_id` with the list of `tags`. Note that this removes any existing tags; if you wanted to append tags, use the `append_tags` function. update: turns on dynamic updates Args: model_id: ID of the model to add tags to tags: List of tags to add to the model auth_token: Optional authentication token \"\"\" client = new_client ( auth_token ) payload = { Headers . MODEL_ID : model_id , Headers . TAGS : tags , Headers . UPDATES : True , Headers . ROLL_FORWARD : True , } try : return client . post ( url = VSURL . MODELING_MODEL_PROPERTIES , data = payload , ) except ModelingServicePostException as err : raise TagModelException ( f 'error tagging model via call { VSURL . MODELING_MODEL_PROPERTIES } ; got { err . status_code } ; message= { err . data } ' ) Model sharing 1 share_model ( model_id : str , email : str , permission : str ) Share model to another user. Parameters: Name Type Description Default model_id str ID of the model to share required email str The email address of the user to share the model with required permission str The permissions to give to the user required Source code in valsys/modeling/service.py 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 def share_model ( model_id : str , email : str , permission : str , auth_token : str = None ): \"\"\"Share model to another user. Args: model_id: ID of the model to share email: The email address of the user to share the model with permission: The permissions to give to the user \"\"\" client = new_client ( auth_token ) permissions = Permissions ( permission ) try : client . post ( url = VSURL . USERS_SHARE_MODEL , headers = { \"email\" : email , Headers . MODEL_ID : model_id , }, data = permissions . jsonify (), ) except ModelingServicePostException as err : raise ShareModelException ( f \"failed to share models { str ( err ) } \" ) The model is shared to the user with specified permissions; the allowed values are permission = view permission = edit permission = fullAccess Any other permission value will result in a NotImplementedError exception being thrown. The allowed permissions and the correct strings can be found via 1 from valsys.modeling.models import Permissions So, for example, Permissions.VIEW could be provided to the share_model function call. If you attempt to share the model with a user that dosent exist, a ShareModelException will be thrown. Model deleting delete_models ( model_ids : List [ str ]) Delete the specified models Parameters: Name Type Description Default model_ids List [ str ] List of model IDs to be deleted. required Source code in valsys/modeling/service.py 864 865 866 867 868 869 870 871 872 873 874 875 def delete_models ( model_ids : List [ str ]): \"\"\" Delete the specified models Args: model_ids: List of model IDs to be deleted. \"\"\" client = new_client () url = VSURL . USERS_MODELS payload = { Headers . MODELS : model_ids } resp = client . delete ( url = url , data = payload ) check_success ( resp , 'deleting models' ) return resp Model searching/filtering 1 filter_user_models Search for a set of models, using the provided set of filters for the using user Parameters: Name Type Description Default filter_on List [ str ] List of strings of properties to filter on; allowed: Name , Ticker , Geography , Industry . None filter_term str Will match according the props in the filter_on list. '' model_type str Options are user , shared , both . 'user' max_date str Maximum creation date of the model (required format: YYYY-MM-DDTHH:MM:DD.SSSZ) tomorrow() min_date str Minimum creation date of the model (required format: YYYY-MM-DDTHH:MM:DD.SSSZ) '2002-01-01T00:00:00.000Z' geo_filters List [ str ] The geographies to include in the search None ind_filters List [ str ] The industries to include in the search None tags List [ str ] List of tags to filter on None tag_filter_type str How to combine the tags to search over; options are and and or . '' pagination int Page number of results 1 fields List [ str ] Fields to return per model None Returns: Type Description List [ ModelDetailInformationWithFields ] List of matching model information objects. Source code in valsys/modeling/service.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def filter_user_models ( tags : List [ str ] = None , model_type : str = 'user' , max_date : str = tomorrow (), min_date : str = \"2002-01-01T00:00:00.000Z\" , tag_filter_type : str = '' , geo_filters : List [ str ] = None , ind_filters : List [ str ] = None , filter_on : List [ str ] = None , filter_term : str = '' , pagination : int = 1 , fields : List [ str ] = None ) -> List [ ModelDetailInformationWithFields ]: \"\"\"Search for a set of models, using the provided set of filters for the using user Args: filter_on: List of strings of properties to filter on; allowed: `Name`, `Ticker`, `Geography`, `Industry`. filter_term: Will match according the props in the `filter_on` list. model_type: Options are `user`, `shared`, `both`. max_date: Maximum creation date of the model (required format: YYYY-MM-DDTHH:MM:DD.SSSZ) min_date: Minimum creation date of the model (required format: YYYY-MM-DDTHH:MM:DD.SSSZ) geo_filters: The geographies to include in the search ind_filters: The industries to include in the search tags: List of tags to filter on tag_filter_type: How to combine the tags to search over; options are `and` and `or`. pagination: Page number of results fields: Fields to return per model Returns: List of matching model information objects. \"\"\" filters = ModelsFilter ( max_date = max_date , min_date = min_date , tag_filter_type = tag_filter_type , model_type = model_type , geo_filters = geo_filters , ind_filters = ind_filters , tag_filters = tags , predicate = filter_term , ) filters . set_filter_on ( filter_on ) url = VSURL . USERS_FILTER_HISTORY if fields is not None : filters . add_fields ( fields ) url = VSURL . USERS_FILTER_HISTORY_FIELDS headers = { Headers . PAGINATION : str ( pagination ), } client = new_client () try : payload = filters . jsonify () resp = client . post ( url = url , headers = headers , data = payload ) except ModelingServicePostException as err : raise err try : return [ ModelDetailInformationWithFields . from_json ( j ) for j in resp . get ( Resp . DATA ) . get ( Resp . MODELS ) ] except ( TypeError , AttributeError ): return [] Get model information 1 pull_model_information ( model_id : str ) Pulls the model information for the model_id . Parameters: Name Type Description Default model_id str the ID of the required model. required Returns: Type Description ModelInformation The ModelInformation object for the model. Source code in valsys/modeling/service.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 def pull_model_information ( model_id : str ) -> ModelInformation : \"\"\"Pulls the model information for the `model_id`. Args: model_id: the ID of the required model. Returns: The `ModelInformation` object for the model. \"\"\" client = new_client () try : resp = client . get ( url = VSURL . MODEL_INFO , headers = { Headers . MODEL_IDS : model_id }, ) if resp . get ( 'status' ) == Vars . SUCCESS : if resp [ \"data\" ][ \"models\" ]: if len ( resp [ \"data\" ][ \"models\" ]) > 0 : cases = resp [ \"data\" ][ \"models\" ][ 0 ][ Resp . MODEL ] else : raise PullModelInformationException ( f \"could not pull model info for model= { model_id } ; no models returned\" ) else : raise PullModelInformationException ( f \"could not pull model info for model= { model_id } ; status= { resp . get ( 'status' ) } \" ) except ( ModelingServiceGetException , Exception ) as err : raise PullModelInformationException ( f \"could not pull model info for model= { model_id } \" ) return ModelInformation . from_json ( model_id , cases ) This function returns a ModelInformation object, whose structure is 1 2 3 4 class ModelInformation : uid : str # the uid of the model tags : List [ str ] # tags on the model cases : List [ CaseInformation ] # list of case information inside the model in which a CaseInformation object has the structure 1 2 3 class CaseInformation : uid : str # the uid of the case case : str # the name of the case Get model case 1 pull_case ( case_id : str ) Retreive a Case by its uid. Parameters: Name Type Description Default case_id str the case's UID required Returns: Type Description Case The appropriate Case object. Source code in valsys/modeling/service.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 def pull_case ( case_id : str ) -> Case : \"\"\"Retreive a `Case` by its uid. Args: case_id: the case's UID Returns: The appropriate `Case` object. \"\"\" client = new_client () resp = client . get ( url = VSURL . CASE , headers = { Headers . CASE_ID : case_id , }, ) return Case . from_json ( resp [ \"data\" ][ \"case\" ]) Recalculate model 1 recalculate_model ( model_id : str ) Recalculates the model. Parameters: Name Type Description Default model_id str The ID of the model to be recalculated. required Returns: Type Description List [ Fact ] List of Facts updated during the recalculation process. Source code in valsys/modeling/service.py 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 def recalculate_model ( model_id : str ) -> List [ Fact ]: \"\"\"Recalculates the model. Args: model_id: The ID of the model to be recalculated. Returns: List of Facts updated during the recalculation process. \"\"\" client = new_client () payload = { Headers . MODEL_ID : model_id , 'update' : True } try : resp = client . post ( url = VSURL . RECALC_MODEL , data = payload ) except ModelingServicePostException as err : raise RecalculateModelException ( f \"error recalculating model: { str ( err ) } \" ) check_success ( resp , 'recalculating model' , exception = RecalculateModelException ) return facts_list ( resp . get ( Resp . DATA ) . get ( Resp . FACTS )) Dynamic updates 1 dynamic_updates () Requests dynamic updates are executed. Source code in valsys/modeling/service.py 263 264 265 266 267 268 269 270 271 272 273 def dynamic_updates (): \"\"\"Requests dynamic updates are executed.\"\"\" client = new_socket_client () resp = client . get ( url = VSURL . SCK_ORCHESTRATOR , data = { \"action\" : ModelingActions . DYNAMIC_UPDATES , \"username\" : API_USERNAME , \"password\" : API_PASSWORD }) return resp Module operations Add child module 1 add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) Add a new module to the parent module. Parameters: Name Type Description Default parent_module_id str The moduleID of the parent required name str The name of the new module required model_id str The ID of the model into which the module is to be inserted required case_id str The caseID of the module. required Returns: Type Description Module The newly constructed Module object. Source code in valsys/modeling/service.py 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 def add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) -> Module : \"\"\"Add a new module to the parent module. Args: parent_module_id: The moduleID of the parent name: The name of the new module model_id: The ID of the model into which the module is to be inserted case_id: The caseID of the module. Returns: The newly constructed `Module` object. \"\"\" payload = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . NAME : name , Headers . PARENT_MODULE_ID : parent_module_id , } client = new_client () resp = client . post ( url = VSURL . ADD_MODULE , data = payload , ) try : child_modules = resp [ \"data\" ][ \"module\" ][ 'edges' ][ \"childModules\" ] except KeyError : raise AddChildModuleException ( f \"Error adding child module: unexpected data structure\" ) for module in child_modules : if module [ \"name\" ] == name : return Module . from_json ( module ) raise AddChildModuleException ( f \"Error adding child module: could not find module with name { name } \" ) Delete module 1 remove_module ( model_id : str , module_id : str ) Removes the specified module from the model. Parameters: Name Type Description Default model_id str The ID of the model. required module_id str The ID of the module to be removed. required Source code in valsys/modeling/service.py 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 def remove_module ( model_id : str , module_id : str ): \"\"\"Removes the specified module from the model. Args: model_id: The ID of the model. module_id: The ID of the module to be removed. \"\"\" client = new_client () try : rm = client . post ( url = VSURL . DELETE_MODULE , data = { Headers . MODEL_ID : model_id , Headers . MODULE_ID : module_id , }, ) except ModelingServicePostException as err : raise RemoveModuleException ( f 'error removing module: { str ( err ) } ' ) return rm . get ( 'status' ) == Vars . SUCCESS Rename module 1 rename_module ( model_id : str , module_id : str , new_module_name : str ) Rename the module. Parameters: Name Type Description Default model_id str the ID of the model required module_id str the ID of the module to be renamed required new_module_name str the new name of the module. required Returns: Type Description Module The new renamed module object. Source code in valsys/modeling/service.py 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 def rename_module ( model_id : str , module_id : str , new_module_name : str ) -> Module : \"\"\"Rename the module. Args: model_id: the ID of the model module_id: the ID of the module to be renamed new_module_name: the new name of the module. Returns: The new renamed module object. \"\"\" client = new_client () r = client . post ( url = VSURL . RENAME_MODULE , data = { Headers . MODEL_ID : model_id , Headers . MODULE_ID : module_id , Headers . NAME : new_module_name }, ) check_success ( r , 'adding column' ) return module_from_resp ( r ) Line item operations Add line item 1 add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) Add a line item to an existing module. Parameters: Name Type Description Default case_id str The caseID of the model required model_id str The modelID required module_id str The ID of the module for the new line item required name str Name of the line item required order int Order of the line item in the module required Returns: Type Description LineItem The newly created LineItem object. Source code in valsys/modeling/service.py 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 def add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) -> LineItem : \"\"\"Add a line item to an existing module. Args: case_id: The caseID of the model model_id: The modelID module_id: The ID of the module for the new line item name: Name of the line item order: Order of the line item in the module Returns: The newly created `LineItem` object. \"\"\" client = new_client () try : resp = client . post ( url = VSURL . ADD_ITEM , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . LINE_ITEM_NAME : name , Headers . ORDER : order , Headers . MODULE_ID : module_id , }, ) except ( ModelingServicePostException , Exception ) as err : logger . exception ( err ) raise AddLineItemException ( f \"error adding line item to model= { model_id } module= { module_id } ; { str ( err ) } \" ) try : line_items = resp [ \"data\" ][ \"module\" ][ 'edges' ][ Resp . LINE_ITEMS ] except KeyError as err : raise AddLineItemException ( \"error adding line item: invalid data structure\" ) for l in line_items : if l [ 'name' ] == name : return LineItem . from_json ( l ) raise AddLineItemException ( f \"error adding line item: cannot find module with name { name } \" ) Delete line item 1 delete_line_item ( model_id : str , module_id : str , line_item_id : str ) Delete a line item from an existing module. Parameters: Name Type Description Default model_id str The modelID required module_id str The ID of the module containing the line item required line_item_id str The ID of the line item to be deleted. required Returns: Type Description Module The Module without the deleted line item. Source code in valsys/modeling/service.py 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 def delete_line_item ( model_id : str , module_id : str , line_item_id : str ) -> Module : \"\"\"Delete a line item from an existing module. Args: model_id: The modelID module_id: The ID of the module containing the line item line_item_id: The ID of the line item to be deleted. Returns: The `Module` without the deleted line item. \"\"\" client = new_client () resp = client . post ( url = VSURL . DELETE_ITEM , data = { Headers . MODEL_ID : model_id , Headers . LINE_ITEM_ID : line_item_id , Headers . MODULE_ID : module_id , }, ) check_success ( resp , 'delete line item' ) return module_from_resp ( resp ) Tag a line item 1 tag_line_item ( model_id : str , line_item_id : str , tags : List [ str ]) Tag a line item. Note that this replaces any existing tags on the line item. Parameters: Name Type Description Default model_id str The ID of the model containing the line item required line_item_id str The ID of the line item required tags List [ str ] The tags to give to the line item required Returns: Type Description LineItem LineItem from the backend, containing updated tags. Source code in valsys/modeling/service.py 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 def tag_line_item ( model_id : str , line_item_id : str , tags : List [ str ]) -> LineItem : \"\"\"Tag a line item. Note that this replaces any existing tags on the line item. Args: model_id: The ID of the model containing the line item line_item_id: The ID of the line item tags: The tags to give to the line item Returns: LineItem from the backend, containing updated tags. \"\"\" client = new_client () payload = { Headers . MODEL_ID : model_id , Headers . LINE_ITEM_ID : line_item_id , Headers . TAGS : tags } try : ait = client . post ( url = VSURL . ADD_ITEM_TAGS , data = payload , ) except ModelingServicePostException as err : raise TagLineItemException ( f \"error tagging line item: payload= { payload } err= { str ( err ) } \" ) return LineItem . from_json ( ait . get ( Resp . DATA ) . get ( Resp . LINE_ITEM )) Edit line items 1 edit_line_items ( model_id : str , line_items : List [ LineItem ]) Edit line items The passed in line items will be used to update the line items. Parameters: Name Type Description Default model_id str the ID of the model containing the line items required line_items List [ LineItem ] List of LineItem s that will be updated. required Source code in valsys/modeling/service.py 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 def edit_line_items ( model_id : str , line_items : List [ LineItem ]) -> List [ LineItem ]: \"\"\"Edit line items The passed in line items will be used to update the line items. Args: model_id: the ID of the model containing the line items line_items: List of `LineItem`s that will be updated. \"\"\" client = new_client () payload = { Headers . MODEL_ID : model_id , Headers . LINE_ITEMS : [ li . jsonify () for li in line_items ], } r = client . post ( url = VSURL . EDIT_LINE_ITEMS , data = payload ) check_success ( r , 'line item editing' ) return line_items_list ( r . get ( Resp . DATA ) . get ( Resp . LINE_ITEMS )) Fact operations Edit formula 1 edit_formula ( case_id : str , model_id : str , facts : List [ Fact ]) Edit the formula on the supplied facts. Parameters: Name Type Description Default case_id str The caseID for where the facts live. required model_id str The modelID for where the facts live. required facts List [ Fact ] The list of facts whose formulae are to be edited. required Returns: Type Description List [ Fact ] List of Fact s modified by the edit. Source code in valsys/modeling/service.py 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 def edit_formula ( case_id : str , model_id : str , facts : List [ Fact ]) -> List [ Fact ]: \"\"\"Edit the formula on the supplied facts. Args: case_id: The caseID for where the facts live. model_id: The modelID for where the facts live. facts: The list of facts whose formulae are to be edited. Returns: List of `Fact`s modified by the edit. \"\"\" return edit_facts ( url = VSURL . EDIT_FORMULA , case_id = case_id , model_id = model_id , facts = facts ) Model groups Get model groups pull_model_groups () Pulls model groups. Returns a list of ModelGroup objects under the groups attribute. Each ModelGroup has a uid , name , user_id , model_ids Returns: Type Description ModelGroups ModelGroups Source code in valsys/modeling/service.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 def pull_model_groups () -> ModelGroups : \"\"\"Pulls model groups. Returns a list of `ModelGroup` objects under the `groups` attribute. Each `ModelGroup` has a `uid`, `name`, `user_id`, `model_ids` Returns: ModelGroups \"\"\" client = new_client () try : g = client . get ( url = VSURL . USERS_GROUPS ) except ModelingServiceGetException as err : raise PullModelGroupsException ( f \"error pulling model groups: { str ( err ) } \" ) return ModelGroups . from_json ( g . get ( Resp . DATA )) Add new model group new_model_groups ( group_name : str , model_ids : List [ str ]) Add a new model group. Parameters: Name Type Description Default group_name str The name of the new model group required model_ids List [ str ] The IDs of the models to go into the group required Returns: Type Description ModelGroups ModelGroups Source code in valsys/modeling/service.py 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 def new_model_groups ( group_name : str , model_ids : List [ str ]) -> ModelGroups : \"\"\"Add a new model group. Args: group_name: The name of the new model group model_ids: The IDs of the models to go into the group Returns: ModelGroups \"\"\" client = new_client () try : g = client . post ( url = VSURL . USERS_GROUP , data = { Headers . NAME : group_name , 'modelIDs' : model_ids }) except ModelingServicePostException as err : raise NewModelGroupsException ( f \"error adding new model groups: { str ( err ) } \" ) return ModelGroups . from_json ( g . get ( Resp . DATA )) Update model groups update_model_groups ( uid : str , name : str , model_ids : List [ str ]) Updates the models groups. Parameters: Name Type Description Default uid str The UID of the model required name str The name of the model group required model_ids List [ str ] The IDs required Returns: Type Description ModelGroups ModelGroups Source code in valsys/modeling/service.py 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 def update_model_groups ( uid : str , name : str , model_ids : List [ str ]) -> ModelGroups : \"\"\"Updates the models groups. Args: uid: The UID of the model name: The name of the model group model_ids: The IDs Returns: ModelGroups \"\"\" client = new_client () try : g = client . post ( url = VSURL . USERS_UPDATE_GROUP , data = { 'name' : name , 'uid' : uid , 'modelIDs' : model_ids }) except ModelingServicePostException as err : raise UpdateModelGroupsException ( str ( err )) return ModelGroups . from_json ( g . get ( Resp . DATA ))","title":"Exposed modeling functions"},{"location":"exposedFunctions/#exposed-modeling-functions","text":"A useful subset of modeling functions have been exposed. To access them, import via 1 from valsys.modeling.service import X For example, from valsys.modeling.service import tag_model . The exposed functions are listed out below. If a number of imports are expected to be used, in order to not explode the number of imports, it may be useful to import and alias the entire modeling service via 1 import valsys.modeling.service as Modeling In which case functions are used via 1 2 Modeling . tag_model ( ... ) Modeling . filter_user_models ( ... ) in which we used a placeholder for the correct function arguments.","title":"Exposed modeling functions"},{"location":"exposedFunctions/#model-operations","text":"","title":"Model operations"},{"location":"exposedFunctions/#model-pulling","text":"1 pull_model ( model_id ) Pull a model by its ID. Parameters: Name Type Description Default model_id str the ID of the required model. required Returns: Type Description Model The Model object for the model. Source code in valsys/modeling/service.py 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 def pull_model ( model_id : str ) -> Model : \"\"\"Pull a model by its ID. Args: model_id: the ID of the required model. Returns: The `Model` object for the model. \"\"\" client = new_client () resp = client . get ( url = VSURL . PULL_MODEL , headers = { Headers . MODEL_ID : model_id }, ) check_success ( resp , 'pull model' ) return Model . from_json ( resp . get ( Resp . DATA ) . get ( Resp . MODEL ))","title":"Model pulling"},{"location":"exposedFunctions/#model-tagging","text":"1 tag_model ( model_id : str , tags : List [ str ]) Tag the model with model_id with the list of tags . Note that this removes any existing tags; if you wanted to append tags, use the append_tags function. update: turns on dynamic updates Parameters: Name Type Description Default model_id str ID of the model to add tags to required tags List [ str ] List of tags to add to the model required auth_token str Optional authentication token None Source code in valsys/modeling/service.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 def tag_model ( model_id : str , tags : List [ str ], auth_token : str = None ): \"\"\"Tag the model with `model_id` with the list of `tags`. Note that this removes any existing tags; if you wanted to append tags, use the `append_tags` function. update: turns on dynamic updates Args: model_id: ID of the model to add tags to tags: List of tags to add to the model auth_token: Optional authentication token \"\"\" client = new_client ( auth_token ) payload = { Headers . MODEL_ID : model_id , Headers . TAGS : tags , Headers . UPDATES : True , Headers . ROLL_FORWARD : True , } try : return client . post ( url = VSURL . MODELING_MODEL_PROPERTIES , data = payload , ) except ModelingServicePostException as err : raise TagModelException ( f 'error tagging model via call { VSURL . MODELING_MODEL_PROPERTIES } ; got { err . status_code } ; message= { err . data } ' )","title":"Model tagging"},{"location":"exposedFunctions/#model-sharing","text":"1 share_model ( model_id : str , email : str , permission : str ) Share model to another user. Parameters: Name Type Description Default model_id str ID of the model to share required email str The email address of the user to share the model with required permission str The permissions to give to the user required Source code in valsys/modeling/service.py 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 def share_model ( model_id : str , email : str , permission : str , auth_token : str = None ): \"\"\"Share model to another user. Args: model_id: ID of the model to share email: The email address of the user to share the model with permission: The permissions to give to the user \"\"\" client = new_client ( auth_token ) permissions = Permissions ( permission ) try : client . post ( url = VSURL . USERS_SHARE_MODEL , headers = { \"email\" : email , Headers . MODEL_ID : model_id , }, data = permissions . jsonify (), ) except ModelingServicePostException as err : raise ShareModelException ( f \"failed to share models { str ( err ) } \" ) The model is shared to the user with specified permissions; the allowed values are permission = view permission = edit permission = fullAccess Any other permission value will result in a NotImplementedError exception being thrown. The allowed permissions and the correct strings can be found via 1 from valsys.modeling.models import Permissions So, for example, Permissions.VIEW could be provided to the share_model function call. If you attempt to share the model with a user that dosent exist, a ShareModelException will be thrown.","title":"Model sharing"},{"location":"exposedFunctions/#model-deleting","text":"delete_models ( model_ids : List [ str ]) Delete the specified models Parameters: Name Type Description Default model_ids List [ str ] List of model IDs to be deleted. required Source code in valsys/modeling/service.py 864 865 866 867 868 869 870 871 872 873 874 875 def delete_models ( model_ids : List [ str ]): \"\"\" Delete the specified models Args: model_ids: List of model IDs to be deleted. \"\"\" client = new_client () url = VSURL . USERS_MODELS payload = { Headers . MODELS : model_ids } resp = client . delete ( url = url , data = payload ) check_success ( resp , 'deleting models' ) return resp","title":"Model deleting"},{"location":"exposedFunctions/#model-searchingfiltering","text":"1 filter_user_models Search for a set of models, using the provided set of filters for the using user Parameters: Name Type Description Default filter_on List [ str ] List of strings of properties to filter on; allowed: Name , Ticker , Geography , Industry . None filter_term str Will match according the props in the filter_on list. '' model_type str Options are user , shared , both . 'user' max_date str Maximum creation date of the model (required format: YYYY-MM-DDTHH:MM:DD.SSSZ) tomorrow() min_date str Minimum creation date of the model (required format: YYYY-MM-DDTHH:MM:DD.SSSZ) '2002-01-01T00:00:00.000Z' geo_filters List [ str ] The geographies to include in the search None ind_filters List [ str ] The industries to include in the search None tags List [ str ] List of tags to filter on None tag_filter_type str How to combine the tags to search over; options are and and or . '' pagination int Page number of results 1 fields List [ str ] Fields to return per model None Returns: Type Description List [ ModelDetailInformationWithFields ] List of matching model information objects. Source code in valsys/modeling/service.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def filter_user_models ( tags : List [ str ] = None , model_type : str = 'user' , max_date : str = tomorrow (), min_date : str = \"2002-01-01T00:00:00.000Z\" , tag_filter_type : str = '' , geo_filters : List [ str ] = None , ind_filters : List [ str ] = None , filter_on : List [ str ] = None , filter_term : str = '' , pagination : int = 1 , fields : List [ str ] = None ) -> List [ ModelDetailInformationWithFields ]: \"\"\"Search for a set of models, using the provided set of filters for the using user Args: filter_on: List of strings of properties to filter on; allowed: `Name`, `Ticker`, `Geography`, `Industry`. filter_term: Will match according the props in the `filter_on` list. model_type: Options are `user`, `shared`, `both`. max_date: Maximum creation date of the model (required format: YYYY-MM-DDTHH:MM:DD.SSSZ) min_date: Minimum creation date of the model (required format: YYYY-MM-DDTHH:MM:DD.SSSZ) geo_filters: The geographies to include in the search ind_filters: The industries to include in the search tags: List of tags to filter on tag_filter_type: How to combine the tags to search over; options are `and` and `or`. pagination: Page number of results fields: Fields to return per model Returns: List of matching model information objects. \"\"\" filters = ModelsFilter ( max_date = max_date , min_date = min_date , tag_filter_type = tag_filter_type , model_type = model_type , geo_filters = geo_filters , ind_filters = ind_filters , tag_filters = tags , predicate = filter_term , ) filters . set_filter_on ( filter_on ) url = VSURL . USERS_FILTER_HISTORY if fields is not None : filters . add_fields ( fields ) url = VSURL . USERS_FILTER_HISTORY_FIELDS headers = { Headers . PAGINATION : str ( pagination ), } client = new_client () try : payload = filters . jsonify () resp = client . post ( url = url , headers = headers , data = payload ) except ModelingServicePostException as err : raise err try : return [ ModelDetailInformationWithFields . from_json ( j ) for j in resp . get ( Resp . DATA ) . get ( Resp . MODELS ) ] except ( TypeError , AttributeError ): return []","title":"Model searching/filtering"},{"location":"exposedFunctions/#get-model-information","text":"1 pull_model_information ( model_id : str ) Pulls the model information for the model_id . Parameters: Name Type Description Default model_id str the ID of the required model. required Returns: Type Description ModelInformation The ModelInformation object for the model. Source code in valsys/modeling/service.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 def pull_model_information ( model_id : str ) -> ModelInformation : \"\"\"Pulls the model information for the `model_id`. Args: model_id: the ID of the required model. Returns: The `ModelInformation` object for the model. \"\"\" client = new_client () try : resp = client . get ( url = VSURL . MODEL_INFO , headers = { Headers . MODEL_IDS : model_id }, ) if resp . get ( 'status' ) == Vars . SUCCESS : if resp [ \"data\" ][ \"models\" ]: if len ( resp [ \"data\" ][ \"models\" ]) > 0 : cases = resp [ \"data\" ][ \"models\" ][ 0 ][ Resp . MODEL ] else : raise PullModelInformationException ( f \"could not pull model info for model= { model_id } ; no models returned\" ) else : raise PullModelInformationException ( f \"could not pull model info for model= { model_id } ; status= { resp . get ( 'status' ) } \" ) except ( ModelingServiceGetException , Exception ) as err : raise PullModelInformationException ( f \"could not pull model info for model= { model_id } \" ) return ModelInformation . from_json ( model_id , cases ) This function returns a ModelInformation object, whose structure is 1 2 3 4 class ModelInformation : uid : str # the uid of the model tags : List [ str ] # tags on the model cases : List [ CaseInformation ] # list of case information inside the model in which a CaseInformation object has the structure 1 2 3 class CaseInformation : uid : str # the uid of the case case : str # the name of the case","title":"Get model information"},{"location":"exposedFunctions/#get-model-case","text":"1 pull_case ( case_id : str ) Retreive a Case by its uid. Parameters: Name Type Description Default case_id str the case's UID required Returns: Type Description Case The appropriate Case object. Source code in valsys/modeling/service.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 def pull_case ( case_id : str ) -> Case : \"\"\"Retreive a `Case` by its uid. Args: case_id: the case's UID Returns: The appropriate `Case` object. \"\"\" client = new_client () resp = client . get ( url = VSURL . CASE , headers = { Headers . CASE_ID : case_id , }, ) return Case . from_json ( resp [ \"data\" ][ \"case\" ])","title":"Get model case"},{"location":"exposedFunctions/#recalculate-model","text":"1 recalculate_model ( model_id : str ) Recalculates the model. Parameters: Name Type Description Default model_id str The ID of the model to be recalculated. required Returns: Type Description List [ Fact ] List of Facts updated during the recalculation process. Source code in valsys/modeling/service.py 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 def recalculate_model ( model_id : str ) -> List [ Fact ]: \"\"\"Recalculates the model. Args: model_id: The ID of the model to be recalculated. Returns: List of Facts updated during the recalculation process. \"\"\" client = new_client () payload = { Headers . MODEL_ID : model_id , 'update' : True } try : resp = client . post ( url = VSURL . RECALC_MODEL , data = payload ) except ModelingServicePostException as err : raise RecalculateModelException ( f \"error recalculating model: { str ( err ) } \" ) check_success ( resp , 'recalculating model' , exception = RecalculateModelException ) return facts_list ( resp . get ( Resp . DATA ) . get ( Resp . FACTS ))","title":"Recalculate model"},{"location":"exposedFunctions/#dynamic-updates","text":"1 dynamic_updates () Requests dynamic updates are executed. Source code in valsys/modeling/service.py 263 264 265 266 267 268 269 270 271 272 273 def dynamic_updates (): \"\"\"Requests dynamic updates are executed.\"\"\" client = new_socket_client () resp = client . get ( url = VSURL . SCK_ORCHESTRATOR , data = { \"action\" : ModelingActions . DYNAMIC_UPDATES , \"username\" : API_USERNAME , \"password\" : API_PASSWORD }) return resp","title":"Dynamic updates"},{"location":"exposedFunctions/#module-operations","text":"","title":"Module operations"},{"location":"exposedFunctions/#add-child-module","text":"1 add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) Add a new module to the parent module. Parameters: Name Type Description Default parent_module_id str The moduleID of the parent required name str The name of the new module required model_id str The ID of the model into which the module is to be inserted required case_id str The caseID of the module. required Returns: Type Description Module The newly constructed Module object. Source code in valsys/modeling/service.py 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 def add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) -> Module : \"\"\"Add a new module to the parent module. Args: parent_module_id: The moduleID of the parent name: The name of the new module model_id: The ID of the model into which the module is to be inserted case_id: The caseID of the module. Returns: The newly constructed `Module` object. \"\"\" payload = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . NAME : name , Headers . PARENT_MODULE_ID : parent_module_id , } client = new_client () resp = client . post ( url = VSURL . ADD_MODULE , data = payload , ) try : child_modules = resp [ \"data\" ][ \"module\" ][ 'edges' ][ \"childModules\" ] except KeyError : raise AddChildModuleException ( f \"Error adding child module: unexpected data structure\" ) for module in child_modules : if module [ \"name\" ] == name : return Module . from_json ( module ) raise AddChildModuleException ( f \"Error adding child module: could not find module with name { name } \" )","title":"Add child module"},{"location":"exposedFunctions/#delete-module","text":"1 remove_module ( model_id : str , module_id : str ) Removes the specified module from the model. Parameters: Name Type Description Default model_id str The ID of the model. required module_id str The ID of the module to be removed. required Source code in valsys/modeling/service.py 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 def remove_module ( model_id : str , module_id : str ): \"\"\"Removes the specified module from the model. Args: model_id: The ID of the model. module_id: The ID of the module to be removed. \"\"\" client = new_client () try : rm = client . post ( url = VSURL . DELETE_MODULE , data = { Headers . MODEL_ID : model_id , Headers . MODULE_ID : module_id , }, ) except ModelingServicePostException as err : raise RemoveModuleException ( f 'error removing module: { str ( err ) } ' ) return rm . get ( 'status' ) == Vars . SUCCESS","title":"Delete module"},{"location":"exposedFunctions/#rename-module","text":"1 rename_module ( model_id : str , module_id : str , new_module_name : str ) Rename the module. Parameters: Name Type Description Default model_id str the ID of the model required module_id str the ID of the module to be renamed required new_module_name str the new name of the module. required Returns: Type Description Module The new renamed module object. Source code in valsys/modeling/service.py 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 def rename_module ( model_id : str , module_id : str , new_module_name : str ) -> Module : \"\"\"Rename the module. Args: model_id: the ID of the model module_id: the ID of the module to be renamed new_module_name: the new name of the module. Returns: The new renamed module object. \"\"\" client = new_client () r = client . post ( url = VSURL . RENAME_MODULE , data = { Headers . MODEL_ID : model_id , Headers . MODULE_ID : module_id , Headers . NAME : new_module_name }, ) check_success ( r , 'adding column' ) return module_from_resp ( r )","title":"Rename module"},{"location":"exposedFunctions/#line-item-operations","text":"","title":"Line item operations"},{"location":"exposedFunctions/#add-line-item","text":"1 add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) Add a line item to an existing module. Parameters: Name Type Description Default case_id str The caseID of the model required model_id str The modelID required module_id str The ID of the module for the new line item required name str Name of the line item required order int Order of the line item in the module required Returns: Type Description LineItem The newly created LineItem object. Source code in valsys/modeling/service.py 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 def add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) -> LineItem : \"\"\"Add a line item to an existing module. Args: case_id: The caseID of the model model_id: The modelID module_id: The ID of the module for the new line item name: Name of the line item order: Order of the line item in the module Returns: The newly created `LineItem` object. \"\"\" client = new_client () try : resp = client . post ( url = VSURL . ADD_ITEM , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . LINE_ITEM_NAME : name , Headers . ORDER : order , Headers . MODULE_ID : module_id , }, ) except ( ModelingServicePostException , Exception ) as err : logger . exception ( err ) raise AddLineItemException ( f \"error adding line item to model= { model_id } module= { module_id } ; { str ( err ) } \" ) try : line_items = resp [ \"data\" ][ \"module\" ][ 'edges' ][ Resp . LINE_ITEMS ] except KeyError as err : raise AddLineItemException ( \"error adding line item: invalid data structure\" ) for l in line_items : if l [ 'name' ] == name : return LineItem . from_json ( l ) raise AddLineItemException ( f \"error adding line item: cannot find module with name { name } \" )","title":"Add line item"},{"location":"exposedFunctions/#delete-line-item","text":"1 delete_line_item ( model_id : str , module_id : str , line_item_id : str ) Delete a line item from an existing module. Parameters: Name Type Description Default model_id str The modelID required module_id str The ID of the module containing the line item required line_item_id str The ID of the line item to be deleted. required Returns: Type Description Module The Module without the deleted line item. Source code in valsys/modeling/service.py 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 def delete_line_item ( model_id : str , module_id : str , line_item_id : str ) -> Module : \"\"\"Delete a line item from an existing module. Args: model_id: The modelID module_id: The ID of the module containing the line item line_item_id: The ID of the line item to be deleted. Returns: The `Module` without the deleted line item. \"\"\" client = new_client () resp = client . post ( url = VSURL . DELETE_ITEM , data = { Headers . MODEL_ID : model_id , Headers . LINE_ITEM_ID : line_item_id , Headers . MODULE_ID : module_id , }, ) check_success ( resp , 'delete line item' ) return module_from_resp ( resp )","title":"Delete line item"},{"location":"exposedFunctions/#tag-a-line-item","text":"1 tag_line_item ( model_id : str , line_item_id : str , tags : List [ str ]) Tag a line item. Note that this replaces any existing tags on the line item. Parameters: Name Type Description Default model_id str The ID of the model containing the line item required line_item_id str The ID of the line item required tags List [ str ] The tags to give to the line item required Returns: Type Description LineItem LineItem from the backend, containing updated tags. Source code in valsys/modeling/service.py 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 def tag_line_item ( model_id : str , line_item_id : str , tags : List [ str ]) -> LineItem : \"\"\"Tag a line item. Note that this replaces any existing tags on the line item. Args: model_id: The ID of the model containing the line item line_item_id: The ID of the line item tags: The tags to give to the line item Returns: LineItem from the backend, containing updated tags. \"\"\" client = new_client () payload = { Headers . MODEL_ID : model_id , Headers . LINE_ITEM_ID : line_item_id , Headers . TAGS : tags } try : ait = client . post ( url = VSURL . ADD_ITEM_TAGS , data = payload , ) except ModelingServicePostException as err : raise TagLineItemException ( f \"error tagging line item: payload= { payload } err= { str ( err ) } \" ) return LineItem . from_json ( ait . get ( Resp . DATA ) . get ( Resp . LINE_ITEM ))","title":"Tag a line item"},{"location":"exposedFunctions/#edit-line-items","text":"1 edit_line_items ( model_id : str , line_items : List [ LineItem ]) Edit line items The passed in line items will be used to update the line items. Parameters: Name Type Description Default model_id str the ID of the model containing the line items required line_items List [ LineItem ] List of LineItem s that will be updated. required Source code in valsys/modeling/service.py 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 def edit_line_items ( model_id : str , line_items : List [ LineItem ]) -> List [ LineItem ]: \"\"\"Edit line items The passed in line items will be used to update the line items. Args: model_id: the ID of the model containing the line items line_items: List of `LineItem`s that will be updated. \"\"\" client = new_client () payload = { Headers . MODEL_ID : model_id , Headers . LINE_ITEMS : [ li . jsonify () for li in line_items ], } r = client . post ( url = VSURL . EDIT_LINE_ITEMS , data = payload ) check_success ( r , 'line item editing' ) return line_items_list ( r . get ( Resp . DATA ) . get ( Resp . LINE_ITEMS ))","title":"Edit line items"},{"location":"exposedFunctions/#fact-operations","text":"","title":"Fact operations"},{"location":"exposedFunctions/#edit-formula","text":"1 edit_formula ( case_id : str , model_id : str , facts : List [ Fact ]) Edit the formula on the supplied facts. Parameters: Name Type Description Default case_id str The caseID for where the facts live. required model_id str The modelID for where the facts live. required facts List [ Fact ] The list of facts whose formulae are to be edited. required Returns: Type Description List [ Fact ] List of Fact s modified by the edit. Source code in valsys/modeling/service.py 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 def edit_formula ( case_id : str , model_id : str , facts : List [ Fact ]) -> List [ Fact ]: \"\"\"Edit the formula on the supplied facts. Args: case_id: The caseID for where the facts live. model_id: The modelID for where the facts live. facts: The list of facts whose formulae are to be edited. Returns: List of `Fact`s modified by the edit. \"\"\" return edit_facts ( url = VSURL . EDIT_FORMULA , case_id = case_id , model_id = model_id , facts = facts )","title":"Edit formula"},{"location":"exposedFunctions/#model-groups","text":"","title":"Model groups"},{"location":"exposedFunctions/#get-model-groups","text":"pull_model_groups () Pulls model groups. Returns a list of ModelGroup objects under the groups attribute. Each ModelGroup has a uid , name , user_id , model_ids Returns: Type Description ModelGroups ModelGroups Source code in valsys/modeling/service.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 def pull_model_groups () -> ModelGroups : \"\"\"Pulls model groups. Returns a list of `ModelGroup` objects under the `groups` attribute. Each `ModelGroup` has a `uid`, `name`, `user_id`, `model_ids` Returns: ModelGroups \"\"\" client = new_client () try : g = client . get ( url = VSURL . USERS_GROUPS ) except ModelingServiceGetException as err : raise PullModelGroupsException ( f \"error pulling model groups: { str ( err ) } \" ) return ModelGroups . from_json ( g . get ( Resp . DATA ))","title":"Get model groups"},{"location":"exposedFunctions/#add-new-model-group","text":"new_model_groups ( group_name : str , model_ids : List [ str ]) Add a new model group. Parameters: Name Type Description Default group_name str The name of the new model group required model_ids List [ str ] The IDs of the models to go into the group required Returns: Type Description ModelGroups ModelGroups Source code in valsys/modeling/service.py 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 def new_model_groups ( group_name : str , model_ids : List [ str ]) -> ModelGroups : \"\"\"Add a new model group. Args: group_name: The name of the new model group model_ids: The IDs of the models to go into the group Returns: ModelGroups \"\"\" client = new_client () try : g = client . post ( url = VSURL . USERS_GROUP , data = { Headers . NAME : group_name , 'modelIDs' : model_ids }) except ModelingServicePostException as err : raise NewModelGroupsException ( f \"error adding new model groups: { str ( err ) } \" ) return ModelGroups . from_json ( g . get ( Resp . DATA ))","title":"Add new model group"},{"location":"exposedFunctions/#update-model-groups","text":"update_model_groups ( uid : str , name : str , model_ids : List [ str ]) Updates the models groups. Parameters: Name Type Description Default uid str The UID of the model required name str The name of the model group required model_ids List [ str ] The IDs required Returns: Type Description ModelGroups ModelGroups Source code in valsys/modeling/service.py 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 def update_model_groups ( uid : str , name : str , model_ids : List [ str ]) -> ModelGroups : \"\"\"Updates the models groups. Args: uid: The UID of the model name: The name of the model group model_ids: The IDs Returns: ModelGroups \"\"\" client = new_client () try : g = client . post ( url = VSURL . USERS_UPDATE_GROUP , data = { 'name' : name , 'uid' : uid , 'modelIDs' : model_ids }) except ModelingServicePostException as err : raise UpdateModelGroupsException ( str ( err )) return ModelGroups . from_json ( g . get ( Resp . DATA ))","title":"Update model groups"},{"location":"vsl/","text":"VSL functions Various VSL functions have been exposed; they can be accessed via the following aliased import 1 import valsys.modeling.vsl as VSL Execute a VSL query This returns data from a query. Could be in the form of widgets. VSL . execute_vsl_query ( ... ) Execute a VSL query Parameters: Name Type Description Default query str the VSL query string to be executed required Returns: Type Description VSLQueryResponse The VSLQueryResponse object response Source code in valsys/modeling/vsl.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def execute_vsl_query ( query : str ) -> VSLQueryResponse : \"\"\" Execute a VSL query Args: query: the VSL query string to be executed Returns: The `VSLQueryResponse` object response \"\"\" client = new_client () url = VSURL . VSL_QUERY payload = { Headers . QUERY : query , } resp = client . post ( url , data = payload ) check_success ( resp , 'VSL query' ) return VSLQueryResponse . from_json ( resp . get ( Resp . DATA )) Execute a VSL selectors query This returns selectors only. VSL . execute_vsl_query_selectors ( ... ) Execute a VSL query Parameters: Name Type Description Default query str the VSL query string to be executed required Returns: Type Description VSLSelectorsResponse The VSLSelectorsResponse object response Source code in valsys/modeling/vsl.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def execute_vsl_query_selectors ( query : str ) -> VSLSelectorsResponse : \"\"\" Execute a VSL query Args: query: the VSL query string to be executed Returns: The `VSLSelectorsResponse` object response \"\"\" client = new_client () url = VSURL . VSL_QUERY payload = { Headers . QUERY : query , } resp = client . post ( url , data = payload ) check_success ( resp , 'VSL query selectors' ) return VSLSelectorsResponse . from_json ( resp . get ( Resp . DATA ))","title":"VSL functions"},{"location":"vsl/#vsl-functions","text":"Various VSL functions have been exposed; they can be accessed via the following aliased import 1 import valsys.modeling.vsl as VSL","title":"VSL functions"},{"location":"vsl/#execute-a-vsl-query","text":"This returns data from a query. Could be in the form of widgets. VSL . execute_vsl_query ( ... ) Execute a VSL query Parameters: Name Type Description Default query str the VSL query string to be executed required Returns: Type Description VSLQueryResponse The VSLQueryResponse object response Source code in valsys/modeling/vsl.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def execute_vsl_query ( query : str ) -> VSLQueryResponse : \"\"\" Execute a VSL query Args: query: the VSL query string to be executed Returns: The `VSLQueryResponse` object response \"\"\" client = new_client () url = VSURL . VSL_QUERY payload = { Headers . QUERY : query , } resp = client . post ( url , data = payload ) check_success ( resp , 'VSL query' ) return VSLQueryResponse . from_json ( resp . get ( Resp . DATA ))","title":"Execute a VSL query"},{"location":"vsl/#execute-a-vsl-selectors-query","text":"This returns selectors only. VSL . execute_vsl_query_selectors ( ... ) Execute a VSL query Parameters: Name Type Description Default query str the VSL query string to be executed required Returns: Type Description VSLSelectorsResponse The VSLSelectorsResponse object response Source code in valsys/modeling/vsl.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def execute_vsl_query_selectors ( query : str ) -> VSLSelectorsResponse : \"\"\" Execute a VSL query Args: query: the VSL query string to be executed Returns: The `VSLSelectorsResponse` object response \"\"\" client = new_client () url = VSURL . VSL_QUERY payload = { Headers . QUERY : query , } resp = client . post ( url , data = payload ) check_success ( resp , 'VSL query selectors' ) return VSLSelectorsResponse . from_json ( resp . get ( Resp . DATA ))","title":"Execute a VSL selectors query"},{"location":"workflowExamples/","text":"Workflow examples This is a collection of examples of how to use the Valsys library.. Spawn a model This workflow allows a model to be spawned from a template. from valsys.config.config import API_PASSWORD , API_USERNAME from valsys.modeling import service as Modeling from valsys.inttests.utils import gen_orch_config from valsys.utils.time import yesterday cfg = { 'companyName' : 'AAP' , 'templateName' : 'AE Template V1' , 'ticker' : 'AAP US' , 'numForecastYears' : 3 , 'numHistoricalYears' : 2 , 'industry' : 'RETAIL-EATING \\u0026 DRINKING PLACES' , 'startPeriod' : 2019 , 'startDate' : yesterday () } spawned_models = Modeling . spawn_model ( gen_orch_config ( cfg = cfg , user = API_USERNAME , password = API_PASSWORD )) print ( spawned_models ) print ( Modeling . pull_model ( spawned_models [ 0 ] . model_id )) Append tags to an existing model Tags can be added or appended to existing models; this assumes knowledge of the models uid . 1 2 3 4 5 6 7 8 9 10 11 # Import the append_tags function from the modeling service from valsys.modeling.service import append_tags # Define the models uid model_uid = \"0xe50deb\" # Define the tags to be appended to the model tags_to_append = [ \"t5\" , \"t4\" ] # Append the tags append_tags ( model_uid , tags_to_append ) Share a model The API allows a model to be shared to another user. This is done by referencing the modelsID, the email of the user the model is to be shared with, and the permissions that the user will have over the model. With a single user 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Import the share_model function from the modeling service import valsys.modeling.service as Modeling # Import the permissions types from valsys.modeling.models import PermissionTypes # Define the models uid model_uid = \"0xe50deb\" # Define the email of the user the model is to be shared with email_to_share_to = \"jack.fuller@valsys.io\" # Define the permissions for the user permission = PermissionTypes . VIEW # Share the model Modeling . share_model ( model_uid , email_to_share_to , permission = permission ) A model can only be shared with a given user once. Violating this will result in a ShareModelException . With multiple user and different permissions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Import the share_model function from the modeling service import valsys.modeling.service as Modeling # Import the permissions types from valsys.modeling.models import PermissionTypes # Define the models uid model_uid = \"0xe50deb\" # Define the list of emails of the users the model is to be shared with; # note that we are allowed to put different permissions per user. users = [ ( \"jack.fuller@valsys.io\" , PermissionTypes . VIEW ), ( \"simon.bessey@valsys.io\" , PermissionTypes . EDIT ) ] # Share the model for email , permission in users : Modeling . share_model ( model_uid , email , permission = permission ) Obtain module information for a model It will be common to need module information: for example, moduleIDs. This workflow shows how to obtain the module meta data for a model. Crucially, this shows the module hierarchy, as well as the module IDs and names. 1 2 3 4 5 6 7 import valsys.modeling.service as Modeling model_uid = \"0xe50deb\" first_case_info = Modeling . pull_model_information ( model_uid ) . first case = Modeling . pull_case ( first_case_info . uid ) module_info = case . module_meta will result in module_info being something like 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 [ { \"name\" : \"DCF\" , \"uid\" : \"0xe50c46\" , \"children\" : [ { \"name\" : \"Balance Sheet\" , \"uid\" : \"0xe50dbd\" , \"children\" : [ { \"name\" : \"Equity\" , \"uid\" : \"0xe50cd3\" , \"children\" : [] }, { \"name\" : \"Liabilities\" , \"uid\" : \"0xe50d22\" , \"children\" : [] }, ] }, { \"name\" : \"DCF Drivers\" , \"uid\" : \"0xe50fe6\" , \"children\" : [] }, { \"name\" : \"Income Statement\" , \"uid\" : \"0xe510a8\" , \"children\" : [ { \"name\" : \"Earnings Per Share\" , \"uid\" : \"0xe50c5f\" , \"children\" : [] }, { \"name\" : \"Operating Income\" , \"uid\" : \"0xe50cf8\" , \"children\" : [] }, ] }, { \"name\" : \"Cash Flow statement\" , \"uid\" : \"0xe51235\" , \"children\" : [ { \"name\" : \"Cash Flow From Operating Activities\" , \"uid\" : \"0xe50c1b\" , \"children\" : [] } ] } ] } ] Note that the nested structure highlights the modules parent-child relationship. Each modules name , uid , and children modules are returned. Add child module to existing module Adding a child module requires knowledge of the parent modules uid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Import the add_child_module function from the modeling service import valsys.modeling.service as Modeling # Define the model id model_id = '0xe50deb' # Define the id of the parent module parent_module_id = '0xe51235' # Define the name of the new module new_module_name = 'new module' # Go get the case uid for the model case_id = Modeling . pull_model_information ( model_id ) . first . uid # Use the above data to add a child module new_module = Modeling . add_child_module ( parent_module_id = parent_module_id , name = new_module_name , model_id = model_id , case_id = case_id ) Add line item to a module This workflow allows a line item to be added to an existing module; it requires knowledge of the modelID , and moduleID . One must provide the name of the new line item, and the order of the line item in the module. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Import the add_line_item function from the modeling service import valsys.modeling.service as Modeling # Define the modelID model_id = '0xe50deb' # Define the module ID of the module the line item is to be added to module_id = '0xe51235' # Define the name of the new line item line_item_name = 'new line item' # Define the order in the module of the new line item line_item_order = 10 # Get the caseID from the modelID case_id = Modeling . pull_model_information ( model_id ) . first . uid # Add the new line item, which returns a new line line object. new_line_item = Modeling . add_line_item ( model_id = model_id , case_id = case_id , module_id = module_id , name = line_item_name , order = line_item_order ) Note that adding the same line item multiple times will result in an error.","title":"Workflow examples"},{"location":"workflowExamples/#workflow-examples","text":"This is a collection of examples of how to use the Valsys library..","title":"Workflow examples"},{"location":"workflowExamples/#spawn-a-model","text":"This workflow allows a model to be spawned from a template. from valsys.config.config import API_PASSWORD , API_USERNAME from valsys.modeling import service as Modeling from valsys.inttests.utils import gen_orch_config from valsys.utils.time import yesterday cfg = { 'companyName' : 'AAP' , 'templateName' : 'AE Template V1' , 'ticker' : 'AAP US' , 'numForecastYears' : 3 , 'numHistoricalYears' : 2 , 'industry' : 'RETAIL-EATING \\u0026 DRINKING PLACES' , 'startPeriod' : 2019 , 'startDate' : yesterday () } spawned_models = Modeling . spawn_model ( gen_orch_config ( cfg = cfg , user = API_USERNAME , password = API_PASSWORD )) print ( spawned_models ) print ( Modeling . pull_model ( spawned_models [ 0 ] . model_id ))","title":"Spawn a model"},{"location":"workflowExamples/#append-tags-to-an-existing-model","text":"Tags can be added or appended to existing models; this assumes knowledge of the models uid . 1 2 3 4 5 6 7 8 9 10 11 # Import the append_tags function from the modeling service from valsys.modeling.service import append_tags # Define the models uid model_uid = \"0xe50deb\" # Define the tags to be appended to the model tags_to_append = [ \"t5\" , \"t4\" ] # Append the tags append_tags ( model_uid , tags_to_append )","title":"Append tags to an existing model"},{"location":"workflowExamples/#share-a-model","text":"The API allows a model to be shared to another user. This is done by referencing the modelsID, the email of the user the model is to be shared with, and the permissions that the user will have over the model.","title":"Share a model"},{"location":"workflowExamples/#with-a-single-user","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Import the share_model function from the modeling service import valsys.modeling.service as Modeling # Import the permissions types from valsys.modeling.models import PermissionTypes # Define the models uid model_uid = \"0xe50deb\" # Define the email of the user the model is to be shared with email_to_share_to = \"jack.fuller@valsys.io\" # Define the permissions for the user permission = PermissionTypes . VIEW # Share the model Modeling . share_model ( model_uid , email_to_share_to , permission = permission ) A model can only be shared with a given user once. Violating this will result in a ShareModelException .","title":"With a single user"},{"location":"workflowExamples/#with-multiple-user-and-different-permissions","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Import the share_model function from the modeling service import valsys.modeling.service as Modeling # Import the permissions types from valsys.modeling.models import PermissionTypes # Define the models uid model_uid = \"0xe50deb\" # Define the list of emails of the users the model is to be shared with; # note that we are allowed to put different permissions per user. users = [ ( \"jack.fuller@valsys.io\" , PermissionTypes . VIEW ), ( \"simon.bessey@valsys.io\" , PermissionTypes . EDIT ) ] # Share the model for email , permission in users : Modeling . share_model ( model_uid , email , permission = permission )","title":"With multiple user and different permissions"},{"location":"workflowExamples/#obtain-module-information-for-a-model","text":"It will be common to need module information: for example, moduleIDs. This workflow shows how to obtain the module meta data for a model. Crucially, this shows the module hierarchy, as well as the module IDs and names. 1 2 3 4 5 6 7 import valsys.modeling.service as Modeling model_uid = \"0xe50deb\" first_case_info = Modeling . pull_model_information ( model_uid ) . first case = Modeling . pull_case ( first_case_info . uid ) module_info = case . module_meta will result in module_info being something like 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 [ { \"name\" : \"DCF\" , \"uid\" : \"0xe50c46\" , \"children\" : [ { \"name\" : \"Balance Sheet\" , \"uid\" : \"0xe50dbd\" , \"children\" : [ { \"name\" : \"Equity\" , \"uid\" : \"0xe50cd3\" , \"children\" : [] }, { \"name\" : \"Liabilities\" , \"uid\" : \"0xe50d22\" , \"children\" : [] }, ] }, { \"name\" : \"DCF Drivers\" , \"uid\" : \"0xe50fe6\" , \"children\" : [] }, { \"name\" : \"Income Statement\" , \"uid\" : \"0xe510a8\" , \"children\" : [ { \"name\" : \"Earnings Per Share\" , \"uid\" : \"0xe50c5f\" , \"children\" : [] }, { \"name\" : \"Operating Income\" , \"uid\" : \"0xe50cf8\" , \"children\" : [] }, ] }, { \"name\" : \"Cash Flow statement\" , \"uid\" : \"0xe51235\" , \"children\" : [ { \"name\" : \"Cash Flow From Operating Activities\" , \"uid\" : \"0xe50c1b\" , \"children\" : [] } ] } ] } ] Note that the nested structure highlights the modules parent-child relationship. Each modules name , uid , and children modules are returned.","title":"Obtain module information for a model"},{"location":"workflowExamples/#add-child-module-to-existing-module","text":"Adding a child module requires knowledge of the parent modules uid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Import the add_child_module function from the modeling service import valsys.modeling.service as Modeling # Define the model id model_id = '0xe50deb' # Define the id of the parent module parent_module_id = '0xe51235' # Define the name of the new module new_module_name = 'new module' # Go get the case uid for the model case_id = Modeling . pull_model_information ( model_id ) . first . uid # Use the above data to add a child module new_module = Modeling . add_child_module ( parent_module_id = parent_module_id , name = new_module_name , model_id = model_id , case_id = case_id )","title":"Add child module to existing module"},{"location":"workflowExamples/#add-line-item-to-a-module","text":"This workflow allows a line item to be added to an existing module; it requires knowledge of the modelID , and moduleID . One must provide the name of the new line item, and the order of the line item in the module. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Import the add_line_item function from the modeling service import valsys.modeling.service as Modeling # Define the modelID model_id = '0xe50deb' # Define the module ID of the module the line item is to be added to module_id = '0xe51235' # Define the name of the new line item line_item_name = 'new line item' # Define the order in the module of the new line item line_item_order = 10 # Get the caseID from the modelID case_id = Modeling . pull_model_information ( model_id ) . first . uid # Add the new line item, which returns a new line line object. new_line_item = Modeling . add_line_item ( model_id = model_id , case_id = case_id , module_id = module_id , name = line_item_name , order = line_item_order ) Note that adding the same line item multiple times will result in an error.","title":"Add line item to a module"}]}