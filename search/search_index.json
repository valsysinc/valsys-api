{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"cli/","text":"Command line interface The valsys library can be used from source via a command line interface (CLI). This works by providing (via command line arguments) the path to a configuration file to the main.py python entry point: python main.py --spawn assets/example_input.json The above is an example input configuration file which should be inspected to understand whats required. See below. This is a pre-defined set of actions which will be executed given the provided configuration data. The workflow is as follows: 1) Spawn a set of models based off a collection of tickers. Collection of lists of tickers, each of which will all have the same templateName , histPeriod , projPeriod , tags , and emails (the emails are the list of emails of users with whom the models are shared). 2) Populate the spawned models with modules. Each model can be populated with different modules (based off a parent module), each with given line items, each of which can be formatted. Each fact (indexed by period) can have its formula provided. Example input configuration This provides a valid example of a configuration file which can be passed to the spawner CLI. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 { \"spawnModelsConfig\" : [ { \"tickers\" : [ \"SBUX\" ], \"templateName\" : \"dcf-standard\" , \"histPeriod\" : 2 , \"projPeriod\" : 3 , \"tags\" : [ \"t1\" ], \"emails\" : [ \"jack.fuller@valsys.io\" ] }, { \"tickers\" : [ \"BYND\" ], \"templateName\" : \"dcf-standard\" , \"histPeriod\" : 2 , \"projPeriod\" : 3 , \"tags\" : [ \"t2\" ], \"emails\" : [] } ], \"populateModulesConfig\" : [ { \"tickers\" : [ \"SBUX\" ], \"parentModuleName\" : \"Income Statement\" , \"moduleName\" : \"Operating Model\" , \"keyMetricsConfig\" : { \"metrics\" : [ \"Revenue Growth, %\" , \"Gross Margin, %\" , \"SG&A / sales\" , \"R&D / sales\" , \"Capex / sales\" ], \"format\" : { \"fontWeight\" : \"bold\" , \"fontStyle\" : \"normal\" , \"textAlign\" : \"right\" , \"textDecoration\" : \"none\" , \"valFormat\" : \"Percentage\" , \"unit\" : \"Raw\" , \"decimalPlaces\" : 1 } }, \"lineItems\" : [ { \"name\" : \"Revenue Growth, %\" , \"order\" : 1 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2019\" , \"formula\" : \"5*2\" } ] }, { \"name\" : \"line item 2\" , \"order\" : 2 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2018\" , \"formula\" : \"1+2\" } ] } ] }, { \"tickers\" : [ \"BYND\" ], \"parentModuleName\" : \"Income Statement\" , \"moduleName\" : \"A new module\" , \"keyMetricsConfig\" : { \"metrics\" : [ \"Revenue Growth, %\" , \"Gross Margin, %\" , \"SG&A / sales\" , \"R&D / sales\" , \"Capex / sales\" ], \"format\" : { \"fontWeight\" : \"bold\" , \"fontStyle\" : \"normal\" , \"textAlign\" : \"right\" , \"textDecoration\" : \"none\" , \"valFormat\" : \"Percentage\" , \"unit\" : \"Raw\" , \"decimalPlaces\" : 1 } }, \"lineItems\" : [ { \"name\" : \"Revenue Growth, %\" , \"order\" : 1 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2019\" , \"formula\" : \"5*2\" } ] }, { \"name\" : \"line item 2\" , \"order\" : 2 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2018\" , \"formula\" : \"1+2\" } ] } ] } ] } There are two main chunks of config: spawnModelsConfig which controls the overal models to be spawned, populateModulesConfig which controls the module population of the models. spawnModelsConfig A list of model configurations, where every ticker in a given configuration chunk will be configured identically. The fields which can be configured are: tickers A list of tickers to whom this configuration applies templateName The name of the template (invalid entries will have errors thrown) histPeriod projPeriod tags A list of tags which will be applied to the models emails A list of user emails to whom the models will be shared populateModulesConfig A list of module configurations, where every ticker in a given configuration chunk will be configured identically. This will add a child module to a parent module in the model. The fields which can be configured are: tickers A list of tickers to whom this configuration applies parentModuleName The name of the parent module to add the child onto. moduleName The name of the new module keyMetricsConfig Information regarding formatting of certain key line items which may (or may not) exist in the module; Any line item whose name appears in the metrics list will be formatted according to format . lineItems A list of line items which will be added to the module. A line item is specified by its name , order inside the module, and a list of formulaEdits : these are a list of data used to identify which formulae to change/add.","title":"Command line interface"},{"location":"cli/#command-line-interface","text":"The valsys library can be used from source via a command line interface (CLI). This works by providing (via command line arguments) the path to a configuration file to the main.py python entry point: python main.py --spawn assets/example_input.json The above is an example input configuration file which should be inspected to understand whats required. See below. This is a pre-defined set of actions which will be executed given the provided configuration data. The workflow is as follows: 1) Spawn a set of models based off a collection of tickers. Collection of lists of tickers, each of which will all have the same templateName , histPeriod , projPeriod , tags , and emails (the emails are the list of emails of users with whom the models are shared). 2) Populate the spawned models with modules. Each model can be populated with different modules (based off a parent module), each with given line items, each of which can be formatted. Each fact (indexed by period) can have its formula provided.","title":"Command line interface"},{"location":"cli/#example-input-configuration","text":"This provides a valid example of a configuration file which can be passed to the spawner CLI. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 { \"spawnModelsConfig\" : [ { \"tickers\" : [ \"SBUX\" ], \"templateName\" : \"dcf-standard\" , \"histPeriod\" : 2 , \"projPeriod\" : 3 , \"tags\" : [ \"t1\" ], \"emails\" : [ \"jack.fuller@valsys.io\" ] }, { \"tickers\" : [ \"BYND\" ], \"templateName\" : \"dcf-standard\" , \"histPeriod\" : 2 , \"projPeriod\" : 3 , \"tags\" : [ \"t2\" ], \"emails\" : [] } ], \"populateModulesConfig\" : [ { \"tickers\" : [ \"SBUX\" ], \"parentModuleName\" : \"Income Statement\" , \"moduleName\" : \"Operating Model\" , \"keyMetricsConfig\" : { \"metrics\" : [ \"Revenue Growth, %\" , \"Gross Margin, %\" , \"SG&A / sales\" , \"R&D / sales\" , \"Capex / sales\" ], \"format\" : { \"fontWeight\" : \"bold\" , \"fontStyle\" : \"normal\" , \"textAlign\" : \"right\" , \"textDecoration\" : \"none\" , \"valFormat\" : \"Percentage\" , \"unit\" : \"Raw\" , \"decimalPlaces\" : 1 } }, \"lineItems\" : [ { \"name\" : \"Revenue Growth, %\" , \"order\" : 1 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2019\" , \"formula\" : \"5*2\" } ] }, { \"name\" : \"line item 2\" , \"order\" : 2 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2018\" , \"formula\" : \"1+2\" } ] } ] }, { \"tickers\" : [ \"BYND\" ], \"parentModuleName\" : \"Income Statement\" , \"moduleName\" : \"A new module\" , \"keyMetricsConfig\" : { \"metrics\" : [ \"Revenue Growth, %\" , \"Gross Margin, %\" , \"SG&A / sales\" , \"R&D / sales\" , \"Capex / sales\" ], \"format\" : { \"fontWeight\" : \"bold\" , \"fontStyle\" : \"normal\" , \"textAlign\" : \"right\" , \"textDecoration\" : \"none\" , \"valFormat\" : \"Percentage\" , \"unit\" : \"Raw\" , \"decimalPlaces\" : 1 } }, \"lineItems\" : [ { \"name\" : \"Revenue Growth, %\" , \"order\" : 1 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2019\" , \"formula\" : \"5*2\" } ] }, { \"name\" : \"line item 2\" , \"order\" : 2 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2018\" , \"formula\" : \"1+2\" } ] } ] } ] } There are two main chunks of config: spawnModelsConfig which controls the overal models to be spawned, populateModulesConfig which controls the module population of the models.","title":"Example input configuration"},{"location":"cli/#spawnmodelsconfig","text":"A list of model configurations, where every ticker in a given configuration chunk will be configured identically. The fields which can be configured are: tickers A list of tickers to whom this configuration applies templateName The name of the template (invalid entries will have errors thrown) histPeriod projPeriod tags A list of tags which will be applied to the models emails A list of user emails to whom the models will be shared","title":"spawnModelsConfig"},{"location":"cli/#populatemodulesconfig","text":"A list of module configurations, where every ticker in a given configuration chunk will be configured identically. This will add a child module to a parent module in the model. The fields which can be configured are: tickers A list of tickers to whom this configuration applies parentModuleName The name of the parent module to add the child onto. moduleName The name of the new module keyMetricsConfig Information regarding formatting of certain key line items which may (or may not) exist in the module; Any line item whose name appears in the metrics list will be formatted according to format . lineItems A list of line items which will be added to the module. A line item is specified by its name , order inside the module, and a list of formulaEdits : these are a list of data used to identify which formulae to change/add.","title":"populateModulesConfig"},{"location":"exposedFunctions/","text":"Exposed modeling functions A useful subset of modeling functions have been exposed. To access them, import via from valsys.modeling.service import X For example, from valsys.modeling.service import tag_model . The exposed functions are listed out below Model tagging tag_model ( model_id : str , tags : List [ str ]) Tag the model with model_id with the list of tags . Note that this removes any existing tags; if you wanted to append tags, use the append_tags function. Parameters: Name Type Description Default model_id str ID of the model to add tags to required tags List [ str ] List of tags to add to the model required auth_token str Optional authentication token None Source code in valsys/modeling/service.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def tag_model ( model_id : str , tags : List [ str ], auth_token : str = None ): \"\"\"Tag the model with `model_id` with the list of `tags`. Note that this removes any existing tags; if you wanted to append tags, use the `append_tags` function. Args: model_id: ID of the model to add tags to tags: List of tags to add to the model auth_token: Optional authentication token \"\"\" client = new_client ( auth_token ) try : return client . post ( url = VSURL . MODELING_MODEL_PROPERTIES , data = { Headers . MODEL_ID : model_id , \"modelTags\" : tags , \"update\" : True , \"rollForward\" : True , }, ) except ModelingServicePostException as err : raise TagModelException ( f 'failed to tag models via call { VSURL . MODELING_MODEL_PROPERTIES } ; got { err . status_code } expected { CODE_POST_SUCCESS } ; message= { err . data } ' ) Model sharing share_model ( model_id : str , email : str , permission : str ) Share model to another user. Parameters: Name Type Description Default model_id str ID of the model to share required email str The email address of the user to share the model with required permission str The permissions to give to the user required Source code in valsys/modeling/service.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def share_model ( model_id : str , email : str , permission : str , auth_token : str = None ): \"\"\"Share model to another user. Args: model_id: ID of the model to share email: The email address of the user to share the model with permission: The permissions to give to the user \"\"\" client = new_client ( auth_token ) permissions = Permissions . get_body ( permission ) try : client . post ( url = VSURL . USERS_SHARE_MODEL , headers = { \"email\" : email , Headers . MODEL_ID : model_id , }, data = permissions , ) except ModelingServicePostException as err : raise ShareModelException ( f \"failed to share models { str ( err ) } \" ) The model is shared to the user with specified permissions; the allowed values are permission = view permission = edit Any other permission value will result in a NotImplementedError exception being thrown. The allowed permissions and the correct strings can be found via from valsys.modeling.models import Permissions So, for example, Permissions.VIEW could be provided to the share_model function call. If you attempt to share the model with a user that dosent exist, a ShareModelException will be thrown. Get model information pull_model_information ( model_id : str ) Pulls the model information for the model_id . Parameters: Name Type Description Default model_id str the ID of the required model. required Returns: Type Description ModelInformation The ModelInformation object for the model. Source code in valsys/modeling/service.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def pull_model_information ( model_id : str ) -> ModelInformation : \"\"\"Pulls the model information for the `model_id`. Args: model_id: the ID of the required model. Returns: The `ModelInformation` object for the model. \"\"\" client = new_client () resp = client . get ( url = VSURL . MODEL_INFO , headers = { Headers . MODEL_ID : model_id , }, ) cases = resp [ \"data\" ][ \"model\" ] return ModelInformation . from_json ( model_id , cases ) This function returns a ModelInformation object, whose structure is class ModelInformation : uid : str # the uid of the model tags : List [ str ] # tags on the model cases : List [ CaseInformation ] # list of case information inside the model in which a CaseInformation object has the structure class CaseInformation : uid : str # the uid of the case case : str # the name of the case Get model case pull_case ( case_id : str ) Retreive a Case by its uid. Parameters: Name Type Description Default case_id str the case's UID required Returns: Type Description Case The appropriate Case object. Source code in valsys/modeling/service.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def pull_case ( case_id : str ) -> Case : \"\"\"Retreive a `Case` by its uid. Args: case_id: the case's UID Returns: The appropriate `Case` object. \"\"\" client = new_client () resp = client . get ( url = VSURL . CASE , headers = { Headers . CASE_ID : case_id , }, ) return Case . from_json ( resp [ \"data\" ][ \"case\" ]) Recalculate model recalculate_model ( model_id : str ) Recalculates the model Add a child module add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) Add a new module to the parent module. Parameters: Name Type Description Default parent_module_id str the moduleID of the parent required name str the name of the new module required model_id str the ID of the model into which the module is to be inserted required case_id str the caseID of the module. required Returns: Type Description Module The newly constructed Module object. Source code in valsys/modeling/service.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 def add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) -> Module : \"\"\"Add a new module to the parent module. Args: parent_module_id: the moduleID of the parent name: the name of the new module model_id: the ID of the model into which the module is to be inserted case_id: the caseID of the module. Returns: The newly constructed `Module` object. \"\"\" client = new_client () resp = client . post ( url = VSURL . ADD_MODULE , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . NAME : name , Headers . PARENT_MODULE_ID : parent_module_id , }, ) child_modules = resp [ \"data\" ][ \"module\" ][ \"childModules\" ] for module in child_modules : if module [ \"name\" ] == name : return Module . from_json ( module ) raise ValueError ( f \"Error adding child module\" ) Add a line item add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) Add a line item to an existing module. Parameters: Name Type Description Default case_id str caseID of the model required model_id str modelID required module_id str ID of the module for the new line item required name str name of the line item required order int order of the line item in the module required Returns: Type Description LineItem The newly created LineItem object. Source code in valsys/modeling/service.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 def add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) -> LineItem : \"\"\"Add a line item to an existing module. Args: case_id: caseID of the model model_id: modelID module_id: ID of the module for the new line item name: name of the line item order: order of the line item in the module Returns: The newly created `LineItem` object. \"\"\" client = new_client () try : resp = client . post ( url = VSURL . ADD_ITEM , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . NAME : name , Headers . ORDER : order , Headers . MODULE_ID : module_id , }, ) except ModelingServicePostException as err : logger . exception ( err ) raise module = Module . from_json ( resp [ \"data\" ][ \"module\" ]) for l in module . line_items : if l . name == name : return l raise ValueError ( f \"cannot find module with name { name } \" )","title":"Exposed modeling functions"},{"location":"exposedFunctions/#exposed-modeling-functions","text":"A useful subset of modeling functions have been exposed. To access them, import via from valsys.modeling.service import X For example, from valsys.modeling.service import tag_model . The exposed functions are listed out below","title":"Exposed modeling functions"},{"location":"exposedFunctions/#model-tagging","text":"tag_model ( model_id : str , tags : List [ str ]) Tag the model with model_id with the list of tags . Note that this removes any existing tags; if you wanted to append tags, use the append_tags function. Parameters: Name Type Description Default model_id str ID of the model to add tags to required tags List [ str ] List of tags to add to the model required auth_token str Optional authentication token None Source code in valsys/modeling/service.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def tag_model ( model_id : str , tags : List [ str ], auth_token : str = None ): \"\"\"Tag the model with `model_id` with the list of `tags`. Note that this removes any existing tags; if you wanted to append tags, use the `append_tags` function. Args: model_id: ID of the model to add tags to tags: List of tags to add to the model auth_token: Optional authentication token \"\"\" client = new_client ( auth_token ) try : return client . post ( url = VSURL . MODELING_MODEL_PROPERTIES , data = { Headers . MODEL_ID : model_id , \"modelTags\" : tags , \"update\" : True , \"rollForward\" : True , }, ) except ModelingServicePostException as err : raise TagModelException ( f 'failed to tag models via call { VSURL . MODELING_MODEL_PROPERTIES } ; got { err . status_code } expected { CODE_POST_SUCCESS } ; message= { err . data } ' )","title":"Model tagging"},{"location":"exposedFunctions/#model-sharing","text":"share_model ( model_id : str , email : str , permission : str ) Share model to another user. Parameters: Name Type Description Default model_id str ID of the model to share required email str The email address of the user to share the model with required permission str The permissions to give to the user required Source code in valsys/modeling/service.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def share_model ( model_id : str , email : str , permission : str , auth_token : str = None ): \"\"\"Share model to another user. Args: model_id: ID of the model to share email: The email address of the user to share the model with permission: The permissions to give to the user \"\"\" client = new_client ( auth_token ) permissions = Permissions . get_body ( permission ) try : client . post ( url = VSURL . USERS_SHARE_MODEL , headers = { \"email\" : email , Headers . MODEL_ID : model_id , }, data = permissions , ) except ModelingServicePostException as err : raise ShareModelException ( f \"failed to share models { str ( err ) } \" ) The model is shared to the user with specified permissions; the allowed values are permission = view permission = edit Any other permission value will result in a NotImplementedError exception being thrown. The allowed permissions and the correct strings can be found via from valsys.modeling.models import Permissions So, for example, Permissions.VIEW could be provided to the share_model function call. If you attempt to share the model with a user that dosent exist, a ShareModelException will be thrown.","title":"Model sharing"},{"location":"exposedFunctions/#get-model-information","text":"pull_model_information ( model_id : str ) Pulls the model information for the model_id . Parameters: Name Type Description Default model_id str the ID of the required model. required Returns: Type Description ModelInformation The ModelInformation object for the model. Source code in valsys/modeling/service.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def pull_model_information ( model_id : str ) -> ModelInformation : \"\"\"Pulls the model information for the `model_id`. Args: model_id: the ID of the required model. Returns: The `ModelInformation` object for the model. \"\"\" client = new_client () resp = client . get ( url = VSURL . MODEL_INFO , headers = { Headers . MODEL_ID : model_id , }, ) cases = resp [ \"data\" ][ \"model\" ] return ModelInformation . from_json ( model_id , cases ) This function returns a ModelInformation object, whose structure is class ModelInformation : uid : str # the uid of the model tags : List [ str ] # tags on the model cases : List [ CaseInformation ] # list of case information inside the model in which a CaseInformation object has the structure class CaseInformation : uid : str # the uid of the case case : str # the name of the case","title":"Get model information"},{"location":"exposedFunctions/#get-model-case","text":"pull_case ( case_id : str ) Retreive a Case by its uid. Parameters: Name Type Description Default case_id str the case's UID required Returns: Type Description Case The appropriate Case object. Source code in valsys/modeling/service.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def pull_case ( case_id : str ) -> Case : \"\"\"Retreive a `Case` by its uid. Args: case_id: the case's UID Returns: The appropriate `Case` object. \"\"\" client = new_client () resp = client . get ( url = VSURL . CASE , headers = { Headers . CASE_ID : case_id , }, ) return Case . from_json ( resp [ \"data\" ][ \"case\" ])","title":"Get model case"},{"location":"exposedFunctions/#recalculate-model","text":"recalculate_model ( model_id : str ) Recalculates the model","title":"Recalculate model"},{"location":"exposedFunctions/#add-a-child-module","text":"add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) Add a new module to the parent module. Parameters: Name Type Description Default parent_module_id str the moduleID of the parent required name str the name of the new module required model_id str the ID of the model into which the module is to be inserted required case_id str the caseID of the module. required Returns: Type Description Module The newly constructed Module object. Source code in valsys/modeling/service.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 def add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) -> Module : \"\"\"Add a new module to the parent module. Args: parent_module_id: the moduleID of the parent name: the name of the new module model_id: the ID of the model into which the module is to be inserted case_id: the caseID of the module. Returns: The newly constructed `Module` object. \"\"\" client = new_client () resp = client . post ( url = VSURL . ADD_MODULE , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . NAME : name , Headers . PARENT_MODULE_ID : parent_module_id , }, ) child_modules = resp [ \"data\" ][ \"module\" ][ \"childModules\" ] for module in child_modules : if module [ \"name\" ] == name : return Module . from_json ( module ) raise ValueError ( f \"Error adding child module\" )","title":"Add a child module"},{"location":"exposedFunctions/#add-a-line-item","text":"add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) Add a line item to an existing module. Parameters: Name Type Description Default case_id str caseID of the model required model_id str modelID required module_id str ID of the module for the new line item required name str name of the line item required order int order of the line item in the module required Returns: Type Description LineItem The newly created LineItem object. Source code in valsys/modeling/service.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 def add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) -> LineItem : \"\"\"Add a line item to an existing module. Args: case_id: caseID of the model model_id: modelID module_id: ID of the module for the new line item name: name of the line item order: order of the line item in the module Returns: The newly created `LineItem` object. \"\"\" client = new_client () try : resp = client . post ( url = VSURL . ADD_ITEM , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . NAME : name , Headers . ORDER : order , Headers . MODULE_ID : module_id , }, ) except ModelingServicePostException as err : logger . exception ( err ) raise module = Module . from_json ( resp [ \"data\" ][ \"module\" ]) for l in module . line_items : if l . name == name : return l raise ValueError ( f \"cannot find module with name { name } \" )","title":"Add a line item"},{"location":"workflowExamples/","text":"Workflow examples This is a collection of examples of how to use the Valsys library. Spawn a model This workflow allows a model to be spawned from a template. In the below example, we show how to spawn a SBUX model and obtain its model uid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Import the spawn_model function from the modeling service from valsys.modeling.service import spawn_model # Import the class for the model seed configuration data from valsys.seeds.model import ModelSeedConfigurationData # Define the model seed configuration data model_seed_config = ModelSeedConfigurationData ( company_name = 'STARBUCKS CORP' , ticker = 'SBUX' , template_name = 'dcf-standard' , proj_period = 3 , hist_period = 2 , industry_group = 'RETAIL-EATING \\u0026 DRINKING PLACES' , start_period = 2019 , start_date = \"2022-07-08T14:18:33.050Z\" ) # Spawn the model and obtain the new modelID spawned_model_id = spawn_model ( model_seed_config ) If the template_name is incorrectly entered (e.g., typo, or something that doesnt exist), a TemplateNotFoundException is thrown explaining TemplateNotFoundException: template not found for template_name: dcf-standard2 Append tags to an existing model Tags can be added or appended to existing models; this assumes knowledge of the models uid . 1 2 3 4 5 6 7 8 9 10 11 # Import the append_tags function from the modeling service from valsys.modeling.service import append_tags # Define the models uid model_uid = \"0xe50deb\" # Define the tags to be appended to the model tags_to_append = [ \"t5\" , \"t4\" ] # Append the tags append_tags ( model_uid , tags_to_append ) Share a model The API allows a model to be shared to another user. This is done by referencing the modelsID, the email of the user the model is to be shared with, and the permissions that the user will have over the model. With a single user 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Import the share_model function from the modeling service from valsys.modeling.service import share_model # Import the permissions types from valsys.modeling.models import Permissions # Define the models uid model_uid = \"0xe50deb\" # Define the email of the user the model is to be shared with email_to_share_to = \"jack.fuller@valsys.io\" # Define the permissions for the user permission = Permissions . VIEW # Share the model share_model ( model_uid , email_to_share_to , permission = permission ) A model can only be shared with a given user once. Violating this will result in a ShareModelException . With multiple user and different permissions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Import the share_model function from the modeling service from valsys.modeling.service import share_model # Import the permissions types from valsys.modeling.models import Permissions # Define the models uid model_uid = \"0xe50deb\" # Define the list of emails of the users the model is to be shared with; # note that we are allowed to put different permissions per user. users = [ ( \"jack.fuller@valsys.io\" , Permissions . VIEW ), ( \"simon.bessey@valsys.io\" , Permissions . EDIT ) ] # Share the model for email , permission in users : share_model ( model_uid , email , permission = permission ) Obtain module information for a model It will be common to need module information: for example, moduleIDs. This workflow shows how to obtain the module meta data for a model. Crucially, this shows the module hierarchy, as well as the module IDs and names. 1 2 3 4 5 6 7 from valsys.modeling.service import pull_model_information , pull_case model_uid = \"0xe50deb\" first_case_info = pull_model_information ( model_uid ) . first case = pull_case ( first_case_info . uid ) module_info = case . module_meta will result in module_info being something like 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 [ { \"name\" : \"DCF\" , \"uid\" : \"0xe50c46\" , \"children\" : [ { \"name\" : \"Balance Sheet\" , \"uid\" : \"0xe50dbd\" , \"children\" : [ { \"name\" : \"Equity\" , \"uid\" : \"0xe50cd3\" , \"children\" : [] }, { \"name\" : \"Liabilities\" , \"uid\" : \"0xe50d22\" , \"children\" : [] }, ] }, { \"name\" : \"DCF Drivers\" , \"uid\" : \"0xe50fe6\" , \"children\" : [] }, { \"name\" : \"Income Statement\" , \"uid\" : \"0xe510a8\" , \"children\" : [ { \"name\" : \"Earnings Per Share\" , \"uid\" : \"0xe50c5f\" , \"children\" : [] }, { \"name\" : \"Operating Income\" , \"uid\" : \"0xe50cf8\" , \"children\" : [] }, ] }, { \"name\" : \"Cash Flow statement\" , \"uid\" : \"0xe51235\" , \"children\" : [ { \"name\" : \"Cash Flow From Operating Activities\" , \"uid\" : \"0xe50c1b\" , \"children\" : [] } ] } ] } ] Note that the nested structure highlights the modules parent-child relationship. Each modules name , uid , and children modules are returned. Add child module to existing module Adding a child module requires knowledge of the parent modules uid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Import the add_child_module function from the modeling service from valsys.modeling.service import add_child_module , pull_model_information # Define the model id model_id = '0xe50deb' # Define the id of the parent module parent_module_id = '0xe51235' # Define the name of the new module new_module_name = 'new module' # Go get the case uid for the model case_id = pull_model_information ( model_id ) . first . uid # Use the above data to add a child module new_module = add_child_module ( parent_module_id = parent_module_id , name = new_module_name , model_id = model_id , case_id = case_id ) Add line item to a module This workflow allows a line item to be added to an existing module; it requires knowledge of the modelID , and moduleID . One must provide the name of the new line item, and the order of the line item in the module. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Import the add_line_item function from the modeling service from valsys.modeling.service import add_line_item , pull_model_information # Define the modelID model_id = '0xe50deb' # Define the module ID of the module the line item is to be added to module_id = '0xe51235' # Define the name of the new line item line_item_name = 'new line item' # Define the order in the module of the new line item line_item_order = 10 # Get the caseID from the modelID case_id = pull_model_information ( model_id ) . first . uid # Add the new line item, which returns a new line line object. new_line_item = add_line_item ( model_id = model_id , case_id = case_id , module_id = module_id , name = line_item_name , order = line_item_order ) Note that adding the same line item multiple times will result in an error.","title":"Workflow examples"},{"location":"workflowExamples/#workflow-examples","text":"This is a collection of examples of how to use the Valsys library.","title":"Workflow examples"},{"location":"workflowExamples/#spawn-a-model","text":"This workflow allows a model to be spawned from a template. In the below example, we show how to spawn a SBUX model and obtain its model uid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Import the spawn_model function from the modeling service from valsys.modeling.service import spawn_model # Import the class for the model seed configuration data from valsys.seeds.model import ModelSeedConfigurationData # Define the model seed configuration data model_seed_config = ModelSeedConfigurationData ( company_name = 'STARBUCKS CORP' , ticker = 'SBUX' , template_name = 'dcf-standard' , proj_period = 3 , hist_period = 2 , industry_group = 'RETAIL-EATING \\u0026 DRINKING PLACES' , start_period = 2019 , start_date = \"2022-07-08T14:18:33.050Z\" ) # Spawn the model and obtain the new modelID spawned_model_id = spawn_model ( model_seed_config ) If the template_name is incorrectly entered (e.g., typo, or something that doesnt exist), a TemplateNotFoundException is thrown explaining TemplateNotFoundException: template not found for template_name: dcf-standard2","title":"Spawn a model"},{"location":"workflowExamples/#append-tags-to-an-existing-model","text":"Tags can be added or appended to existing models; this assumes knowledge of the models uid . 1 2 3 4 5 6 7 8 9 10 11 # Import the append_tags function from the modeling service from valsys.modeling.service import append_tags # Define the models uid model_uid = \"0xe50deb\" # Define the tags to be appended to the model tags_to_append = [ \"t5\" , \"t4\" ] # Append the tags append_tags ( model_uid , tags_to_append )","title":"Append tags to an existing model"},{"location":"workflowExamples/#share-a-model","text":"The API allows a model to be shared to another user. This is done by referencing the modelsID, the email of the user the model is to be shared with, and the permissions that the user will have over the model.","title":"Share a model"},{"location":"workflowExamples/#with-a-single-user","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Import the share_model function from the modeling service from valsys.modeling.service import share_model # Import the permissions types from valsys.modeling.models import Permissions # Define the models uid model_uid = \"0xe50deb\" # Define the email of the user the model is to be shared with email_to_share_to = \"jack.fuller@valsys.io\" # Define the permissions for the user permission = Permissions . VIEW # Share the model share_model ( model_uid , email_to_share_to , permission = permission ) A model can only be shared with a given user once. Violating this will result in a ShareModelException .","title":"With a single user"},{"location":"workflowExamples/#with-multiple-user-and-different-permissions","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Import the share_model function from the modeling service from valsys.modeling.service import share_model # Import the permissions types from valsys.modeling.models import Permissions # Define the models uid model_uid = \"0xe50deb\" # Define the list of emails of the users the model is to be shared with; # note that we are allowed to put different permissions per user. users = [ ( \"jack.fuller@valsys.io\" , Permissions . VIEW ), ( \"simon.bessey@valsys.io\" , Permissions . EDIT ) ] # Share the model for email , permission in users : share_model ( model_uid , email , permission = permission )","title":"With multiple user and different permissions"},{"location":"workflowExamples/#obtain-module-information-for-a-model","text":"It will be common to need module information: for example, moduleIDs. This workflow shows how to obtain the module meta data for a model. Crucially, this shows the module hierarchy, as well as the module IDs and names. 1 2 3 4 5 6 7 from valsys.modeling.service import pull_model_information , pull_case model_uid = \"0xe50deb\" first_case_info = pull_model_information ( model_uid ) . first case = pull_case ( first_case_info . uid ) module_info = case . module_meta will result in module_info being something like 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 [ { \"name\" : \"DCF\" , \"uid\" : \"0xe50c46\" , \"children\" : [ { \"name\" : \"Balance Sheet\" , \"uid\" : \"0xe50dbd\" , \"children\" : [ { \"name\" : \"Equity\" , \"uid\" : \"0xe50cd3\" , \"children\" : [] }, { \"name\" : \"Liabilities\" , \"uid\" : \"0xe50d22\" , \"children\" : [] }, ] }, { \"name\" : \"DCF Drivers\" , \"uid\" : \"0xe50fe6\" , \"children\" : [] }, { \"name\" : \"Income Statement\" , \"uid\" : \"0xe510a8\" , \"children\" : [ { \"name\" : \"Earnings Per Share\" , \"uid\" : \"0xe50c5f\" , \"children\" : [] }, { \"name\" : \"Operating Income\" , \"uid\" : \"0xe50cf8\" , \"children\" : [] }, ] }, { \"name\" : \"Cash Flow statement\" , \"uid\" : \"0xe51235\" , \"children\" : [ { \"name\" : \"Cash Flow From Operating Activities\" , \"uid\" : \"0xe50c1b\" , \"children\" : [] } ] } ] } ] Note that the nested structure highlights the modules parent-child relationship. Each modules name , uid , and children modules are returned.","title":"Obtain module information for a model"},{"location":"workflowExamples/#add-child-module-to-existing-module","text":"Adding a child module requires knowledge of the parent modules uid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Import the add_child_module function from the modeling service from valsys.modeling.service import add_child_module , pull_model_information # Define the model id model_id = '0xe50deb' # Define the id of the parent module parent_module_id = '0xe51235' # Define the name of the new module new_module_name = 'new module' # Go get the case uid for the model case_id = pull_model_information ( model_id ) . first . uid # Use the above data to add a child module new_module = add_child_module ( parent_module_id = parent_module_id , name = new_module_name , model_id = model_id , case_id = case_id )","title":"Add child module to existing module"},{"location":"workflowExamples/#add-line-item-to-a-module","text":"This workflow allows a line item to be added to an existing module; it requires knowledge of the modelID , and moduleID . One must provide the name of the new line item, and the order of the line item in the module. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Import the add_line_item function from the modeling service from valsys.modeling.service import add_line_item , pull_model_information # Define the modelID model_id = '0xe50deb' # Define the module ID of the module the line item is to be added to module_id = '0xe51235' # Define the name of the new line item line_item_name = 'new line item' # Define the order in the module of the new line item line_item_order = 10 # Get the caseID from the modelID case_id = pull_model_information ( model_id ) . first . uid # Add the new line item, which returns a new line line object. new_line_item = add_line_item ( model_id = model_id , case_id = case_id , module_id = module_id , name = line_item_name , order = line_item_order ) Note that adding the same line item multiple times will result in an error.","title":"Add line item to a module"}]}