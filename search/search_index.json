{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started Create a python virtual environment We recommended that you install the valsys library into a python virtual (local) environment, rather than into the global python environment. This requires you to have a system-wide installation of python (below we assume that your version of python is version 3.6 or later.). Other environment management systems are available. To create a python virtual environment in the current directory, execute python -m venv .venv The activation of the virtual environment is slightly different on windows and mac: If on windows, use .venv\\Scripts\\activate.ps1 If on linux/mac, use source .venv/bin/activate Installing the valsys package Now that you have an active virtual environment, install the valsys python package via pip install git + https : // github . com / valsysinc / valsys - api Any other packages you require (e.g., spark , or numpy ) will also need to be installed into the environment Environment setup To effectively use the library certain environment variables are required. These can be set in two ways: first via login process which guides you through the process, secondly via directly setting environment variables (if you are unsure as to which applies to your situation, contact valsys support). Login Once the library has been installed, the first task is to login. From a python script (e.g., in the repl, or a jupyter notebook), execute from valsys.admin import login login () Alternatively, you could execute the following on a command line python main.py --login Either way, you will be prompted to enter the following information: Valsys host : the base part of the valsys url (if unsure, contact valsys support) Valsys protocol : whether using http or https . Valsys username : this is the username used to login to the valsys system Valsys password : this is the password used to login to the valsys system The login process will attempt to authenticate with these pieces of information. Below we provide a screenshot of a jupyter notebook showing the expected screen and output. Environment variables If the login function does not works for your system, you will need to manually configure the following environment variables: VALSYS_API_BUILD : this is your company identifier (contact valsys support to find this value) VALSYS_API_SOCKET : the socket address (e.g., wss://dev-api.valsys.io ) VALSYS_API_SERVER : the http(s) server address (e.g., https://dev-api.valsys.io ) VALSYS_API_USER : the username used to log into the valsys system VALSYS_API_PASSWORD : the password used to log into the valsys system Your operating system or IDE will dictate the best method for setting these variables.","title":"Getting started"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#create-a-python-virtual-environment","text":"We recommended that you install the valsys library into a python virtual (local) environment, rather than into the global python environment. This requires you to have a system-wide installation of python (below we assume that your version of python is version 3.6 or later.). Other environment management systems are available. To create a python virtual environment in the current directory, execute python -m venv .venv The activation of the virtual environment is slightly different on windows and mac: If on windows, use .venv\\Scripts\\activate.ps1 If on linux/mac, use source .venv/bin/activate","title":"Create a python virtual environment"},{"location":"#installing-the-valsys-package","text":"Now that you have an active virtual environment, install the valsys python package via pip install git + https : // github . com / valsysinc / valsys - api Any other packages you require (e.g., spark , or numpy ) will also need to be installed into the environment","title":"Installing the valsys package"},{"location":"#environment-setup","text":"To effectively use the library certain environment variables are required. These can be set in two ways: first via login process which guides you through the process, secondly via directly setting environment variables (if you are unsure as to which applies to your situation, contact valsys support).","title":"Environment setup"},{"location":"#login","text":"Once the library has been installed, the first task is to login. From a python script (e.g., in the repl, or a jupyter notebook), execute from valsys.admin import login login () Alternatively, you could execute the following on a command line python main.py --login Either way, you will be prompted to enter the following information: Valsys host : the base part of the valsys url (if unsure, contact valsys support) Valsys protocol : whether using http or https . Valsys username : this is the username used to login to the valsys system Valsys password : this is the password used to login to the valsys system The login process will attempt to authenticate with these pieces of information. Below we provide a screenshot of a jupyter notebook showing the expected screen and output.","title":"Login"},{"location":"#environment-variables","text":"If the login function does not works for your system, you will need to manually configure the following environment variables: VALSYS_API_BUILD : this is your company identifier (contact valsys support to find this value) VALSYS_API_SOCKET : the socket address (e.g., wss://dev-api.valsys.io ) VALSYS_API_SERVER : the http(s) server address (e.g., https://dev-api.valsys.io ) VALSYS_API_USER : the username used to log into the valsys system VALSYS_API_PASSWORD : the password used to log into the valsys system Your operating system or IDE will dictate the best method for setting these variables.","title":"Environment variables"},{"location":"exposedFunctions/","text":"Exposed modeling functions A useful subset of modeling functions have been exposed. To access them, import via 1 from valsys.modeling.service import X For example, from valsys.modeling.service import tag_model . The exposed functions are listed out below Model tagging 1 tag_model ( model_id : str , tags : List [ str ]) Tag the model with model_id with the list of tags . Note that this removes any existing tags; if you wanted to append tags, use the append_tags function. Parameters: Name Type Description Default model_id str ID of the model to add tags to required tags List [ str ] List of tags to add to the model required auth_token str Optional authentication token None Source code in valsys/modeling/service.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def tag_model ( model_id : str , tags : List [ str ], auth_token : str = None ): \"\"\"Tag the model with `model_id` with the list of `tags`. Note that this removes any existing tags; if you wanted to append tags, use the `append_tags` function. Args: model_id: ID of the model to add tags to tags: List of tags to add to the model auth_token: Optional authentication token \"\"\" client = new_client ( auth_token ) try : return client . post ( url = VSURL . MODELING_MODEL_PROPERTIES , data = { Headers . MODEL_ID : model_id , \"modelTags\" : tags , \"update\" : True , \"rollForward\" : True , }, ) except ModelingServicePostException as err : raise TagModelException ( f 'failed to tag models via call { VSURL . MODELING_MODEL_PROPERTIES } ; got { err . status_code } expected { CODE_POST_SUCCESS } ; message= { err . data } ' ) Model sharing 1 share_model ( model_id : str , email : str , permission : str ) Share model to another user. Parameters: Name Type Description Default model_id str ID of the model to share required email str The email address of the user to share the model with required permission str The permissions to give to the user required Source code in valsys/modeling/service.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def share_model ( model_id : str , email : str , permission : str , auth_token : str = None ): \"\"\"Share model to another user. Args: model_id: ID of the model to share email: The email address of the user to share the model with permission: The permissions to give to the user \"\"\" client = new_client ( auth_token ) permissions = Permissions ( permission ) try : client . post ( url = VSURL . USERS_SHARE_MODEL , headers = { \"email\" : email , Headers . MODEL_ID : model_id , }, data = permissions . jsonify (), ) except ModelingServicePostException as err : raise ShareModelException ( f \"failed to share models { str ( err ) } \" ) The model is shared to the user with specified permissions; the allowed values are permission = view permission = edit permission = fullAccess Any other permission value will result in a NotImplementedError exception being thrown. The allowed permissions and the correct strings can be found via 1 from valsys.modeling.models import Permissions So, for example, Permissions.VIEW could be provided to the share_model function call. If you attempt to share the model with a user that dosent exist, a ShareModelException will be thrown. Get model groups Pulls model groups. Returns a list of ModelGroup objects under the groups attribute. Each ModelGroup has a uid , name , user_id , model_ids Returns: Type Description ModelGroups ModelGroups Source code in valsys/modeling/service.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def pull_model_groups () -> ModelGroups : \"\"\"Pulls model groups. Returns a list of `ModelGroup` objects under the `groups` attribute. Each `ModelGroup` has a `uid`, `name`, `user_id`, `model_ids` Returns: ModelGroups \"\"\" client = new_client () try : g = client . get ( url = VSURL . USERS_GROUPS ) except ModelingServiceGetException : raise mg = ModelGroups . from_json ( g . get ( 'data' )) mg . status = g . get ( 'status' ) return mg Update model groups Updates the models groups. Parameters: Name Type Description Default uid str The UID of the model required name str The name of the model group required model_ids List [ str ] The IDs required Returns: Type Description ModelGroups ModelGroups Source code in valsys/modeling/service.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def update_model_groups ( uid : str , name : str , model_ids : List [ str ]) -> ModelGroups : \"\"\"Updates the models groups. Args: uid: The UID of the model name: The name of the model group model_ids: The IDs Returns: ModelGroups \"\"\" client = new_client () try : g = client . post ( url = VSURL . USERS_UPDATE_GROUP , data = { 'name' : name , 'uid' : uid , 'modelIDs' : model_ids }) except ModelingServicePostException : raise mg = ModelGroups . from_json ( g . get ( 'data' )) mg . status = g . get ( 'status' ) return mg Get model information 1 pull_model_information ( model_id : str ) Pulls the model information for the model_id . Parameters: Name Type Description Default model_id str the ID of the required model. required Returns: Type Description ModelInformation The ModelInformation object for the model. Source code in valsys/modeling/service.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 def pull_model_information ( model_id : str ) -> ModelInformation : \"\"\"Pulls the model information for the `model_id`. Args: model_id: the ID of the required model. Returns: The `ModelInformation` object for the model. \"\"\" client = new_client () try : resp = client . get ( url = VSURL . MODEL_INFO , headers = { Headers . MODEL_ID : model_id , }, ) cases = resp [ \"data\" ][ \"model\" ] except Exception as err : raise PullModelInformationException ( f \"could not pull model info for model= { model_id } \" ) return ModelInformation . from_json ( model_id , cases ) This function returns a ModelInformation object, whose structure is 1 2 3 4 class ModelInformation : uid : str # the uid of the model tags : List [ str ] # tags on the model cases : List [ CaseInformation ] # list of case information inside the model in which a CaseInformation object has the structure 1 2 3 class CaseInformation : uid : str # the uid of the case case : str # the name of the case Get model case 1 pull_case ( case_id : str ) Retreive a Case by its uid. Parameters: Name Type Description Default case_id str the case's UID required Returns: Type Description Case The appropriate Case object. Source code in valsys/modeling/service.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 def pull_case ( case_id : str ) -> Case : \"\"\"Retreive a `Case` by its uid. Args: case_id: the case's UID Returns: The appropriate `Case` object. \"\"\" client = new_client () resp = client . get ( url = VSURL . CASE , headers = { Headers . CASE_ID : case_id , }, ) return Case . from_json ( resp [ \"data\" ][ \"case\" ]) Recalculate model 1 recalculate_model ( model_id : str ) Recalculates the model. Parameters: Name Type Description Default model_id str The ID of the model to be recalculated. required Source code in valsys/modeling/service.py 237 238 239 240 241 242 243 244 245 246 247 248 249 def recalculate_model ( model_id : str ): \"\"\"Recalculates the model. Args: model_id: The ID of the model to be recalculated. \"\"\" client = new_client () try : resp = client . get ( url = VSURL . RECALC_MODEL , headers = { Headers . UID : model_id }) return resp except ModelingServiceGetException as err : raise RecalculateModelException ( str ( err )) Remove a module 1 2 remove_module ( model_id : str , case_id : str , module_id : str , parent_module_id : str ) Removes the specified module from the model. Parameters: Name Type Description Default model_id str The ID of the model. required case_id str The ID of the case containing the module. required module_id str The ID of the module to be removed. required parent_module_id str The ID of the parent of the module to be removed. required Source code in valsys/modeling/service.py 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 def remove_module ( model_id : str , case_id : str , module_id : str , parent_module_id : str ): \"\"\"Removes the specified module from the model. Args: model_id: The ID of the model. case_id: The ID of the case containing the module. module_id: The ID of the module to be removed. parent_module_id: The ID of the parent of the module to be removed. \"\"\" client = new_client () try : client . post ( url = VSURL . DELETE_MODULE , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . PARENT_MODULE_ID : parent_module_id , Headers . UID : module_id , }, ) except ModelingServicePostException as err : if err . data . get ( 'message' ) == 'could not find fact' : raise RemoveModuleException ( 'could not find module to delete' ) raise return True Add a child module 1 add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) Add a new module to the parent module. Parameters: Name Type Description Default parent_module_id str The moduleID of the parent required name str The name of the new module required model_id str The ID of the model into which the module is to be inserted required case_id str The caseID of the module. required Returns: Type Description Module The newly constructed Module object. Source code in valsys/modeling/service.py 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 def add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) -> Module : \"\"\"Add a new module to the parent module. Args: parent_module_id: The moduleID of the parent name: The name of the new module model_id: The ID of the model into which the module is to be inserted case_id: The caseID of the module. Returns: The newly constructed `Module` object. \"\"\" client = new_client () resp = client . post ( url = VSURL . ADD_MODULE , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . NAME : name , Headers . PARENT_MODULE_ID : parent_module_id , }, ) child_modules = resp [ \"data\" ][ \"module\" ][ \"childModules\" ] for module in child_modules : if module [ \"name\" ] == name : return Module . from_json ( module ) raise AddChildModuleException ( f \"Error adding child module\" ) Add a line item 1 2 add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) Add a line item to an existing module. Parameters: Name Type Description Default case_id str The caseID of the model required model_id str The modelID required module_id str The ID of the module for the new line item required name str Name of the line item required order int Order of the line item in the module required Returns: Type Description LineItem The newly created LineItem object. Source code in valsys/modeling/service.py 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 def add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) -> LineItem : \"\"\"Add a line item to an existing module. Args: case_id: The caseID of the model model_id: The modelID module_id: The ID of the module for the new line item name: Name of the line item order: Order of the line item in the module Returns: The newly created `LineItem` object. \"\"\" client = new_client () try : resp = client . post ( url = VSURL . ADD_ITEM , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . NAME : name , Headers . ORDER : order , Headers . MODULE_ID : module_id , }, ) except ModelingServicePostException as err : logger . exception ( err ) raise except Exception as err : raise AddLineItemException ( f \"error adding line item to model= { model_id } module= { module_id } \" ) module = Module . from_json ( resp [ \"data\" ][ \"module\" ]) for l in module . line_items : if l . name == name : return l raise AddLineItemException ( f \"cannot find module with name { name } \" ) Dynamic updates 1 dynamic_updates () Requests dynamic updates are executed. Source code in valsys/modeling/service.py 119 120 121 122 123 124 125 126 127 128 129 def dynamic_updates (): \"\"\"Requests dynamic updates are executed.\"\"\" client = new_socket_client () resp = client . get ( url = VSURL . SCK_ORCHESTRATOR , data = { \"action\" : ModelingActions . DYNAMIC_UPDATES , \"username\" : API_USERNAME , \"password\" : API_PASSWORD }) return resp Edit formula 1 edit_formula ( case_id : str , model_id : str , facts : List [ Fact ]) Edit the formula on the supplied facts. Parameters: Name Type Description Default case_id str The caseID for where the facts live. required model_id str The modelID for where the facts live. required facts List [ Fact ] The list of facts whose formulae are to be edited. required Source code in valsys/modeling/service.py 376 377 378 379 380 381 382 383 384 385 386 387 def edit_formula ( case_id : str , model_id : str , facts : List [ Fact ]): \"\"\"Edit the formula on the supplied facts. Args: case_id: The caseID for where the facts live. model_id: The modelID for where the facts live. facts: The list of facts whose formulae are to be edited. \"\"\" return edit_facts ( url = VSURL . EDIT_FORMULA , case_id = case_id , model_id = model_id , facts = facts )","title":"Exposed modeling functions"},{"location":"exposedFunctions/#exposed-modeling-functions","text":"A useful subset of modeling functions have been exposed. To access them, import via 1 from valsys.modeling.service import X For example, from valsys.modeling.service import tag_model . The exposed functions are listed out below","title":"Exposed modeling functions"},{"location":"exposedFunctions/#model-tagging","text":"1 tag_model ( model_id : str , tags : List [ str ]) Tag the model with model_id with the list of tags . Note that this removes any existing tags; if you wanted to append tags, use the append_tags function. Parameters: Name Type Description Default model_id str ID of the model to add tags to required tags List [ str ] List of tags to add to the model required auth_token str Optional authentication token None Source code in valsys/modeling/service.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def tag_model ( model_id : str , tags : List [ str ], auth_token : str = None ): \"\"\"Tag the model with `model_id` with the list of `tags`. Note that this removes any existing tags; if you wanted to append tags, use the `append_tags` function. Args: model_id: ID of the model to add tags to tags: List of tags to add to the model auth_token: Optional authentication token \"\"\" client = new_client ( auth_token ) try : return client . post ( url = VSURL . MODELING_MODEL_PROPERTIES , data = { Headers . MODEL_ID : model_id , \"modelTags\" : tags , \"update\" : True , \"rollForward\" : True , }, ) except ModelingServicePostException as err : raise TagModelException ( f 'failed to tag models via call { VSURL . MODELING_MODEL_PROPERTIES } ; got { err . status_code } expected { CODE_POST_SUCCESS } ; message= { err . data } ' )","title":"Model tagging"},{"location":"exposedFunctions/#model-sharing","text":"1 share_model ( model_id : str , email : str , permission : str ) Share model to another user. Parameters: Name Type Description Default model_id str ID of the model to share required email str The email address of the user to share the model with required permission str The permissions to give to the user required Source code in valsys/modeling/service.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def share_model ( model_id : str , email : str , permission : str , auth_token : str = None ): \"\"\"Share model to another user. Args: model_id: ID of the model to share email: The email address of the user to share the model with permission: The permissions to give to the user \"\"\" client = new_client ( auth_token ) permissions = Permissions ( permission ) try : client . post ( url = VSURL . USERS_SHARE_MODEL , headers = { \"email\" : email , Headers . MODEL_ID : model_id , }, data = permissions . jsonify (), ) except ModelingServicePostException as err : raise ShareModelException ( f \"failed to share models { str ( err ) } \" ) The model is shared to the user with specified permissions; the allowed values are permission = view permission = edit permission = fullAccess Any other permission value will result in a NotImplementedError exception being thrown. The allowed permissions and the correct strings can be found via 1 from valsys.modeling.models import Permissions So, for example, Permissions.VIEW could be provided to the share_model function call. If you attempt to share the model with a user that dosent exist, a ShareModelException will be thrown.","title":"Model sharing"},{"location":"exposedFunctions/#get-model-groups","text":"Pulls model groups. Returns a list of ModelGroup objects under the groups attribute. Each ModelGroup has a uid , name , user_id , model_ids Returns: Type Description ModelGroups ModelGroups Source code in valsys/modeling/service.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def pull_model_groups () -> ModelGroups : \"\"\"Pulls model groups. Returns a list of `ModelGroup` objects under the `groups` attribute. Each `ModelGroup` has a `uid`, `name`, `user_id`, `model_ids` Returns: ModelGroups \"\"\" client = new_client () try : g = client . get ( url = VSURL . USERS_GROUPS ) except ModelingServiceGetException : raise mg = ModelGroups . from_json ( g . get ( 'data' )) mg . status = g . get ( 'status' ) return mg","title":"Get model groups"},{"location":"exposedFunctions/#update-model-groups","text":"Updates the models groups. Parameters: Name Type Description Default uid str The UID of the model required name str The name of the model group required model_ids List [ str ] The IDs required Returns: Type Description ModelGroups ModelGroups Source code in valsys/modeling/service.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def update_model_groups ( uid : str , name : str , model_ids : List [ str ]) -> ModelGroups : \"\"\"Updates the models groups. Args: uid: The UID of the model name: The name of the model group model_ids: The IDs Returns: ModelGroups \"\"\" client = new_client () try : g = client . post ( url = VSURL . USERS_UPDATE_GROUP , data = { 'name' : name , 'uid' : uid , 'modelIDs' : model_ids }) except ModelingServicePostException : raise mg = ModelGroups . from_json ( g . get ( 'data' )) mg . status = g . get ( 'status' ) return mg","title":"Update model groups"},{"location":"exposedFunctions/#get-model-information","text":"1 pull_model_information ( model_id : str ) Pulls the model information for the model_id . Parameters: Name Type Description Default model_id str the ID of the required model. required Returns: Type Description ModelInformation The ModelInformation object for the model. Source code in valsys/modeling/service.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 def pull_model_information ( model_id : str ) -> ModelInformation : \"\"\"Pulls the model information for the `model_id`. Args: model_id: the ID of the required model. Returns: The `ModelInformation` object for the model. \"\"\" client = new_client () try : resp = client . get ( url = VSURL . MODEL_INFO , headers = { Headers . MODEL_ID : model_id , }, ) cases = resp [ \"data\" ][ \"model\" ] except Exception as err : raise PullModelInformationException ( f \"could not pull model info for model= { model_id } \" ) return ModelInformation . from_json ( model_id , cases ) This function returns a ModelInformation object, whose structure is 1 2 3 4 class ModelInformation : uid : str # the uid of the model tags : List [ str ] # tags on the model cases : List [ CaseInformation ] # list of case information inside the model in which a CaseInformation object has the structure 1 2 3 class CaseInformation : uid : str # the uid of the case case : str # the name of the case","title":"Get model information"},{"location":"exposedFunctions/#get-model-case","text":"1 pull_case ( case_id : str ) Retreive a Case by its uid. Parameters: Name Type Description Default case_id str the case's UID required Returns: Type Description Case The appropriate Case object. Source code in valsys/modeling/service.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 def pull_case ( case_id : str ) -> Case : \"\"\"Retreive a `Case` by its uid. Args: case_id: the case's UID Returns: The appropriate `Case` object. \"\"\" client = new_client () resp = client . get ( url = VSURL . CASE , headers = { Headers . CASE_ID : case_id , }, ) return Case . from_json ( resp [ \"data\" ][ \"case\" ])","title":"Get model case"},{"location":"exposedFunctions/#recalculate-model","text":"1 recalculate_model ( model_id : str ) Recalculates the model. Parameters: Name Type Description Default model_id str The ID of the model to be recalculated. required Source code in valsys/modeling/service.py 237 238 239 240 241 242 243 244 245 246 247 248 249 def recalculate_model ( model_id : str ): \"\"\"Recalculates the model. Args: model_id: The ID of the model to be recalculated. \"\"\" client = new_client () try : resp = client . get ( url = VSURL . RECALC_MODEL , headers = { Headers . UID : model_id }) return resp except ModelingServiceGetException as err : raise RecalculateModelException ( str ( err ))","title":"Recalculate model"},{"location":"exposedFunctions/#remove-a-module","text":"1 2 remove_module ( model_id : str , case_id : str , module_id : str , parent_module_id : str ) Removes the specified module from the model. Parameters: Name Type Description Default model_id str The ID of the model. required case_id str The ID of the case containing the module. required module_id str The ID of the module to be removed. required parent_module_id str The ID of the parent of the module to be removed. required Source code in valsys/modeling/service.py 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 def remove_module ( model_id : str , case_id : str , module_id : str , parent_module_id : str ): \"\"\"Removes the specified module from the model. Args: model_id: The ID of the model. case_id: The ID of the case containing the module. module_id: The ID of the module to be removed. parent_module_id: The ID of the parent of the module to be removed. \"\"\" client = new_client () try : client . post ( url = VSURL . DELETE_MODULE , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . PARENT_MODULE_ID : parent_module_id , Headers . UID : module_id , }, ) except ModelingServicePostException as err : if err . data . get ( 'message' ) == 'could not find fact' : raise RemoveModuleException ( 'could not find module to delete' ) raise return True","title":"Remove a module"},{"location":"exposedFunctions/#add-a-child-module","text":"1 add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) Add a new module to the parent module. Parameters: Name Type Description Default parent_module_id str The moduleID of the parent required name str The name of the new module required model_id str The ID of the model into which the module is to be inserted required case_id str The caseID of the module. required Returns: Type Description Module The newly constructed Module object. Source code in valsys/modeling/service.py 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 def add_child_module ( parent_module_id : str , name : str , model_id : str , case_id : str ) -> Module : \"\"\"Add a new module to the parent module. Args: parent_module_id: The moduleID of the parent name: The name of the new module model_id: The ID of the model into which the module is to be inserted case_id: The caseID of the module. Returns: The newly constructed `Module` object. \"\"\" client = new_client () resp = client . post ( url = VSURL . ADD_MODULE , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . NAME : name , Headers . PARENT_MODULE_ID : parent_module_id , }, ) child_modules = resp [ \"data\" ][ \"module\" ][ \"childModules\" ] for module in child_modules : if module [ \"name\" ] == name : return Module . from_json ( module ) raise AddChildModuleException ( f \"Error adding child module\" )","title":"Add a child module"},{"location":"exposedFunctions/#add-a-line-item","text":"1 2 add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) Add a line item to an existing module. Parameters: Name Type Description Default case_id str The caseID of the model required model_id str The modelID required module_id str The ID of the module for the new line item required name str Name of the line item required order int Order of the line item in the module required Returns: Type Description LineItem The newly created LineItem object. Source code in valsys/modeling/service.py 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 def add_line_item ( case_id : str , model_id : str , module_id : str , name : str , order : int ) -> LineItem : \"\"\"Add a line item to an existing module. Args: case_id: The caseID of the model model_id: The modelID module_id: The ID of the module for the new line item name: Name of the line item order: Order of the line item in the module Returns: The newly created `LineItem` object. \"\"\" client = new_client () try : resp = client . post ( url = VSURL . ADD_ITEM , data = { Headers . CASE_ID : case_id , Headers . MODEL_ID : model_id , Headers . NAME : name , Headers . ORDER : order , Headers . MODULE_ID : module_id , }, ) except ModelingServicePostException as err : logger . exception ( err ) raise except Exception as err : raise AddLineItemException ( f \"error adding line item to model= { model_id } module= { module_id } \" ) module = Module . from_json ( resp [ \"data\" ][ \"module\" ]) for l in module . line_items : if l . name == name : return l raise AddLineItemException ( f \"cannot find module with name { name } \" )","title":"Add a line item"},{"location":"exposedFunctions/#dynamic-updates","text":"1 dynamic_updates () Requests dynamic updates are executed. Source code in valsys/modeling/service.py 119 120 121 122 123 124 125 126 127 128 129 def dynamic_updates (): \"\"\"Requests dynamic updates are executed.\"\"\" client = new_socket_client () resp = client . get ( url = VSURL . SCK_ORCHESTRATOR , data = { \"action\" : ModelingActions . DYNAMIC_UPDATES , \"username\" : API_USERNAME , \"password\" : API_PASSWORD }) return resp","title":"Dynamic updates"},{"location":"exposedFunctions/#edit-formula","text":"1 edit_formula ( case_id : str , model_id : str , facts : List [ Fact ]) Edit the formula on the supplied facts. Parameters: Name Type Description Default case_id str The caseID for where the facts live. required model_id str The modelID for where the facts live. required facts List [ Fact ] The list of facts whose formulae are to be edited. required Source code in valsys/modeling/service.py 376 377 378 379 380 381 382 383 384 385 386 387 def edit_formula ( case_id : str , model_id : str , facts : List [ Fact ]): \"\"\"Edit the formula on the supplied facts. Args: case_id: The caseID for where the facts live. model_id: The modelID for where the facts live. facts: The list of facts whose formulae are to be edited. \"\"\" return edit_facts ( url = VSURL . EDIT_FORMULA , case_id = case_id , model_id = model_id , facts = facts )","title":"Edit formula"},{"location":"modelSpawn/","text":"Model spawning Models can be spawned on the valsys system in a variety of ways. This page explains a few of the common usecases. Using the workflow This is a pre-defined set of actions which will be executed given the provided configuration data. The workflow is as follows: 1) Spawn a set of models based on a collection of tickers. Collection of lists of tickers, each of which will all have the same templateName , histPeriod , projPeriod , tags , and emails (the emails are the list of emails of users with whom the models are shared). 2) Populate the spawned models with additional modules. Each model can be populated with different modules (based on a parent module), each with given line items, each of which can be formatted. Each fact (indexed by period) can have its formula provided. The workflow requires a configuration; the structure of the configuration is explained below. The spawn process can be started in two ways: via the command line, or via a python function call. Run via code If you have a config file on disk use the run_spawn_models_from_file function, and pass the full path to file as an argument from valsys.workflows.service import run_spawn_models_from_file run_spawn_models_from_file ( 'config_file.json' ) Alternatively, if you have the configuration in memory as a dict, then use the run_spawn_models function (passing the config dict as an argument): from valsys.workflows.service import run_spawn_models config = { \"spawnModelsConfig\" :[ ... ], \"populateModulesConfig\" :[ ... ]} run_spawn_models ( config ) Run via command line The valsys library can be used from source via a command line interface (CLI). This works by providing (via command line arguments) the path to a configuration file to the main.py python entry point: python main.py --spawn assets/example_input.json Example input configuration This provides a valid example of a configuration file which can be passed to the spawner CLI. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 { \"spawnModelsConfig\" : [ { \"tickers\" : [ \"SBUX\" ], \"templateName\" : \"dcf-standard\" , \"numForecastYears\" : 2 , \"numHistoricalYears\" : 3 , \"tags\" : [ \"t1\" ], \"emails\" : [ \"jack.fuller@valsys.io\" ] }, { \"tickers\" : [ \"BYND\" ], \"templateName\" : \"dcf-standard\" , \"numForecastYears\" : 2 , \"numHistoricalYears\" : 3 , \"tags\" : [ \"t2\" ], \"emails\" : [] } ], \"populateModulesConfig\" : [ { \"tickers\" : [ \"SBUX\" ], \"parentModuleName\" : \"Income Statement\" , \"moduleName\" : \"Operating Model\" , \"keyMetricsConfig\" : { \"metrics\" : [ \"Revenue Growth, %\" , \"Gross Margin, %\" , \"SG&A / sales\" , \"R&D / sales\" , \"Capex / sales\" ], \"format\" : { \"fontWeight\" : \"bold\" , \"fontStyle\" : \"normal\" , \"textAlign\" : \"right\" , \"textDecoration\" : \"none\" , \"valFormat\" : \"Percentage\" , \"unit\" : \"Raw\" , \"decimalPlaces\" : 1 } }, \"lineItems\" : [ { \"name\" : \"Revenue Growth, %\" , \"order\" : 1 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2019\" , \"formula\" : \"5*2\" } ] }, { \"name\" : \"line item 2\" , \"order\" : 2 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2018\" , \"formula\" : \"1+2\" } ] } ] }, { \"tickers\" : [ \"BYND\" ], \"parentModuleName\" : \"Income Statement\" , \"moduleName\" : \"A new module\" , \"keyMetricsConfig\" : { \"metrics\" : [ \"Revenue Growth, %\" , \"Gross Margin, %\" , \"SG&A / sales\" , \"R&D / sales\" , \"Capex / sales\" ], \"format\" : { \"fontWeight\" : \"bold\" , \"fontStyle\" : \"normal\" , \"textAlign\" : \"right\" , \"textDecoration\" : \"none\" , \"valFormat\" : \"Percentage\" , \"unit\" : \"Raw\" , \"decimalPlaces\" : 1 } }, \"lineItems\" : [ { \"name\" : \"Revenue Growth, %\" , \"order\" : 1 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2019\" , \"formula\" : \"5*2\" } ] }, { \"name\" : \"line item 2\" , \"order\" : 2 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2018\" , \"formula\" : \"1+2\" } ] } ] } ] } There are two main chunks of config: spawnModelsConfig which controls the overal models to be spawned, populateModulesConfig which controls the module population of the models. spawnModelsConfig A list of model configurations, where every ticker in a given configuration chunk will be configured identically. The fields which can be configured are: tickers A list of tickers to whom this configuration applies templateName The name of the template (invalid entries will have errors thrown) numForecastYears The number of forecast years numHistoricalYears The number of historical years tags A list of tags which will be applied to the models emails A list of user emails to whom the models will be shared By default, periodType is set to ANNUAL startDate is set the current date/time populateModulesConfig A list of module configurations, where every ticker in a given configuration chunk will be configured identically. This will add a child module to a parent module in the model. The fields which can be configured are: tickers A list of tickers to whom this configuration applies parentModuleName The name of the parent module to add the child onto. moduleName The name of the new module keyMetricsConfig Information regarding formatting of certain key line items which may (or may not) exist in the module; Any line item whose name appears in the metrics list will be formatted according to format . lineItems A list of line items which will be added to the module. A line item is specified by its name , order inside the module, and a list of formulaEdits : these are a list of data used to identify which formulae to change/add. Manual configuration Finally, it is possible to construct custom configuration objects. It may be the case that some other routine provides a list of model seeds; the key thing is that it contains data which can be interpreted in the following way 1 2 3 4 5 6 7 8 9 10 # Example model seed data structure from dataclasses import dataclass @dataclass class SampleModelSeed : companyName : str ticker : str template_id : str IndustryGroup : str fiscalYear : str source : str Using this data structure we then assemble a list of SampleModelSeed s 1 2 3 4 5 6 7 8 model_seeds = [ SampleModelSeed ( companyName = 'STARBUCKS CORP' , ticker = 'SBUX' , IndustryGroup = 'RETAIL-EATING & DRINKING PLACES' , template_id = 'd87b8446-38a1-4fd4-ad71-a40c3ef77b0f' , fiscalYear = 2019 , source = 'SBUX_US|JP' ) ] We are now in a position to create the full OrchestratorConfig object; we must also provide the number of historical and forecast years: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import datetime from valsys.seeds.models import OrchestratorConfig # Create an orchestrator config object orchestrator_configuration = OrchestratorConfig ( num_forecast_years = 11 , num_historical_years = 5 , start_date = datetime . datetime . now () . strftime ( '%Y-%m- %d T%H:%M:%S. %f Z' ), period_type = 'ANNUAL' ) # Add the model seeds to the orchestrator config for row in model_seeds : orchestrator_configuration . add_model_config ( company_name = row . companyName , ticker = row . ticker , template_id = row . template_id , industry = row . IndustryGroup , start_period = row . fiscalYear , source = row . source , ) Now that the configuration object has been fully constructed, it can be passed to a function to spawn the models, from which the spawned modelIDs can be extracted 1 2 3 4 5 6 7 8 9 10 from valsys.spawn.service import orchestrate_model_spawns # Pass the orchestrator config to be spawned model_spawns = orchestrate_model_spawns ( orchestrator_configuration ) # Collect together a list of modelIDs that successfully spawned model_ids = [] for m in model_spawns : if m . spawned : model_ids . append ( m . model_id ) Below is a complete list of configurable options for the add_model_config method. Add a model config; provide all the required model data. Parameters: Name Type Description Default company_name str The name of the company required ticker str The name of the ticker required template_id str The ID of the template to use required industry str The industry of the company required start_period int The start period; usually a year required source str The data source identifier '' start_date str The start date - if none given, it is defaulted to the current date-time stamp. None type str The type 'DEFAULT' period_type str The type of periods 'ANNUAL' cash_flow_type str The cash flow type 'FCFF' valuation_type str The valuation type 'Perpetual Growth' company_type str The company type 'Public' target_variable str The target variable 'Implied share price' Source code in valsys/seeds/models.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def add_model_config ( self , company_name : str , ticker : str , template_id : str , industry : str , start_period : int , source : str = '' , start_date : str = None , type : str = \"DEFAULT\" , period_type : str = \"ANNUAL\" , cash_flow_type : str = \"FCFF\" , valuation_type : str = \"Perpetual Growth\" , company_type : str = \"Public\" , target_variable : str = \"Implied share price\" , ): \"\"\"Add a model config; provide all the required model data. Args: company_name: The name of the company ticker: The name of the ticker template_id: The ID of the template to use industry: The industry of the company start_period: The start period; usually a year source: The data source identifier start_date: The start date - if none given, it is defaulted to the current date-time stamp. type: The type period_type: The type of periods cash_flow_type: The cash flow type valuation_type: The valuation type company_type: The company type target_variable: The target variable \"\"\" self . model_configs . append ( OrchestratorModelConfig ( company_name = company_name , ticker = ticker , template_id = template_id , industry = industry , start_period = start_period , start_date = start_date or datetime . datetime . now () . strftime ( '%Y-%m- %d T%H:%M:%S. %f Z' ), type = type , period_type = period_type , cash_flow_type = cash_flow_type , valuation_type = valuation_type , company_type = company_type , target_variable = target_variable , source = source ))","title":"Model spawning"},{"location":"modelSpawn/#model-spawning","text":"Models can be spawned on the valsys system in a variety of ways. This page explains a few of the common usecases.","title":"Model spawning"},{"location":"modelSpawn/#using-the-workflow","text":"This is a pre-defined set of actions which will be executed given the provided configuration data. The workflow is as follows: 1) Spawn a set of models based on a collection of tickers. Collection of lists of tickers, each of which will all have the same templateName , histPeriod , projPeriod , tags , and emails (the emails are the list of emails of users with whom the models are shared). 2) Populate the spawned models with additional modules. Each model can be populated with different modules (based on a parent module), each with given line items, each of which can be formatted. Each fact (indexed by period) can have its formula provided. The workflow requires a configuration; the structure of the configuration is explained below. The spawn process can be started in two ways: via the command line, or via a python function call.","title":"Using the workflow"},{"location":"modelSpawn/#run-via-code","text":"If you have a config file on disk use the run_spawn_models_from_file function, and pass the full path to file as an argument from valsys.workflows.service import run_spawn_models_from_file run_spawn_models_from_file ( 'config_file.json' ) Alternatively, if you have the configuration in memory as a dict, then use the run_spawn_models function (passing the config dict as an argument): from valsys.workflows.service import run_spawn_models config = { \"spawnModelsConfig\" :[ ... ], \"populateModulesConfig\" :[ ... ]} run_spawn_models ( config )","title":"Run via code"},{"location":"modelSpawn/#run-via-command-line","text":"The valsys library can be used from source via a command line interface (CLI). This works by providing (via command line arguments) the path to a configuration file to the main.py python entry point: python main.py --spawn assets/example_input.json","title":"Run via command line"},{"location":"modelSpawn/#example-input-configuration","text":"This provides a valid example of a configuration file which can be passed to the spawner CLI. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 { \"spawnModelsConfig\" : [ { \"tickers\" : [ \"SBUX\" ], \"templateName\" : \"dcf-standard\" , \"numForecastYears\" : 2 , \"numHistoricalYears\" : 3 , \"tags\" : [ \"t1\" ], \"emails\" : [ \"jack.fuller@valsys.io\" ] }, { \"tickers\" : [ \"BYND\" ], \"templateName\" : \"dcf-standard\" , \"numForecastYears\" : 2 , \"numHistoricalYears\" : 3 , \"tags\" : [ \"t2\" ], \"emails\" : [] } ], \"populateModulesConfig\" : [ { \"tickers\" : [ \"SBUX\" ], \"parentModuleName\" : \"Income Statement\" , \"moduleName\" : \"Operating Model\" , \"keyMetricsConfig\" : { \"metrics\" : [ \"Revenue Growth, %\" , \"Gross Margin, %\" , \"SG&A / sales\" , \"R&D / sales\" , \"Capex / sales\" ], \"format\" : { \"fontWeight\" : \"bold\" , \"fontStyle\" : \"normal\" , \"textAlign\" : \"right\" , \"textDecoration\" : \"none\" , \"valFormat\" : \"Percentage\" , \"unit\" : \"Raw\" , \"decimalPlaces\" : 1 } }, \"lineItems\" : [ { \"name\" : \"Revenue Growth, %\" , \"order\" : 1 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2019\" , \"formula\" : \"5*2\" } ] }, { \"name\" : \"line item 2\" , \"order\" : 2 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2018\" , \"formula\" : \"1+2\" } ] } ] }, { \"tickers\" : [ \"BYND\" ], \"parentModuleName\" : \"Income Statement\" , \"moduleName\" : \"A new module\" , \"keyMetricsConfig\" : { \"metrics\" : [ \"Revenue Growth, %\" , \"Gross Margin, %\" , \"SG&A / sales\" , \"R&D / sales\" , \"Capex / sales\" ], \"format\" : { \"fontWeight\" : \"bold\" , \"fontStyle\" : \"normal\" , \"textAlign\" : \"right\" , \"textDecoration\" : \"none\" , \"valFormat\" : \"Percentage\" , \"unit\" : \"Raw\" , \"decimalPlaces\" : 1 } }, \"lineItems\" : [ { \"name\" : \"Revenue Growth, %\" , \"order\" : 1 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2019\" , \"formula\" : \"5*2\" } ] }, { \"name\" : \"line item 2\" , \"order\" : 2 , \"formulaEdits\" : [ { \"periodName\" : \"\" , \"periodYear\" : \"2018\" , \"formula\" : \"1+2\" } ] } ] } ] } There are two main chunks of config: spawnModelsConfig which controls the overal models to be spawned, populateModulesConfig which controls the module population of the models.","title":"Example input configuration"},{"location":"modelSpawn/#spawnmodelsconfig","text":"A list of model configurations, where every ticker in a given configuration chunk will be configured identically. The fields which can be configured are: tickers A list of tickers to whom this configuration applies templateName The name of the template (invalid entries will have errors thrown) numForecastYears The number of forecast years numHistoricalYears The number of historical years tags A list of tags which will be applied to the models emails A list of user emails to whom the models will be shared By default, periodType is set to ANNUAL startDate is set the current date/time","title":"spawnModelsConfig"},{"location":"modelSpawn/#populatemodulesconfig","text":"A list of module configurations, where every ticker in a given configuration chunk will be configured identically. This will add a child module to a parent module in the model. The fields which can be configured are: tickers A list of tickers to whom this configuration applies parentModuleName The name of the parent module to add the child onto. moduleName The name of the new module keyMetricsConfig Information regarding formatting of certain key line items which may (or may not) exist in the module; Any line item whose name appears in the metrics list will be formatted according to format . lineItems A list of line items which will be added to the module. A line item is specified by its name , order inside the module, and a list of formulaEdits : these are a list of data used to identify which formulae to change/add.","title":"populateModulesConfig"},{"location":"modelSpawn/#manual-configuration","text":"Finally, it is possible to construct custom configuration objects. It may be the case that some other routine provides a list of model seeds; the key thing is that it contains data which can be interpreted in the following way 1 2 3 4 5 6 7 8 9 10 # Example model seed data structure from dataclasses import dataclass @dataclass class SampleModelSeed : companyName : str ticker : str template_id : str IndustryGroup : str fiscalYear : str source : str Using this data structure we then assemble a list of SampleModelSeed s 1 2 3 4 5 6 7 8 model_seeds = [ SampleModelSeed ( companyName = 'STARBUCKS CORP' , ticker = 'SBUX' , IndustryGroup = 'RETAIL-EATING & DRINKING PLACES' , template_id = 'd87b8446-38a1-4fd4-ad71-a40c3ef77b0f' , fiscalYear = 2019 , source = 'SBUX_US|JP' ) ] We are now in a position to create the full OrchestratorConfig object; we must also provide the number of historical and forecast years: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import datetime from valsys.seeds.models import OrchestratorConfig # Create an orchestrator config object orchestrator_configuration = OrchestratorConfig ( num_forecast_years = 11 , num_historical_years = 5 , start_date = datetime . datetime . now () . strftime ( '%Y-%m- %d T%H:%M:%S. %f Z' ), period_type = 'ANNUAL' ) # Add the model seeds to the orchestrator config for row in model_seeds : orchestrator_configuration . add_model_config ( company_name = row . companyName , ticker = row . ticker , template_id = row . template_id , industry = row . IndustryGroup , start_period = row . fiscalYear , source = row . source , ) Now that the configuration object has been fully constructed, it can be passed to a function to spawn the models, from which the spawned modelIDs can be extracted 1 2 3 4 5 6 7 8 9 10 from valsys.spawn.service import orchestrate_model_spawns # Pass the orchestrator config to be spawned model_spawns = orchestrate_model_spawns ( orchestrator_configuration ) # Collect together a list of modelIDs that successfully spawned model_ids = [] for m in model_spawns : if m . spawned : model_ids . append ( m . model_id ) Below is a complete list of configurable options for the add_model_config method. Add a model config; provide all the required model data. Parameters: Name Type Description Default company_name str The name of the company required ticker str The name of the ticker required template_id str The ID of the template to use required industry str The industry of the company required start_period int The start period; usually a year required source str The data source identifier '' start_date str The start date - if none given, it is defaulted to the current date-time stamp. None type str The type 'DEFAULT' period_type str The type of periods 'ANNUAL' cash_flow_type str The cash flow type 'FCFF' valuation_type str The valuation type 'Perpetual Growth' company_type str The company type 'Public' target_variable str The target variable 'Implied share price' Source code in valsys/seeds/models.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def add_model_config ( self , company_name : str , ticker : str , template_id : str , industry : str , start_period : int , source : str = '' , start_date : str = None , type : str = \"DEFAULT\" , period_type : str = \"ANNUAL\" , cash_flow_type : str = \"FCFF\" , valuation_type : str = \"Perpetual Growth\" , company_type : str = \"Public\" , target_variable : str = \"Implied share price\" , ): \"\"\"Add a model config; provide all the required model data. Args: company_name: The name of the company ticker: The name of the ticker template_id: The ID of the template to use industry: The industry of the company start_period: The start period; usually a year source: The data source identifier start_date: The start date - if none given, it is defaulted to the current date-time stamp. type: The type period_type: The type of periods cash_flow_type: The cash flow type valuation_type: The valuation type company_type: The company type target_variable: The target variable \"\"\" self . model_configs . append ( OrchestratorModelConfig ( company_name = company_name , ticker = ticker , template_id = template_id , industry = industry , start_period = start_period , start_date = start_date or datetime . datetime . now () . strftime ( '%Y-%m- %d T%H:%M:%S. %f Z' ), type = type , period_type = period_type , cash_flow_type = cash_flow_type , valuation_type = valuation_type , company_type = company_type , target_variable = target_variable , source = source ))","title":"Manual configuration"},{"location":"workflowExamples/","text":"Workflow examples This is a collection of examples of how to use the Valsys library.. Spawn a model This workflow allows a model to be spawned from a template. In the below example, we show how to spawn a SBUX model and obtain its model uid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Import the spawn_model function from the spawn service from valsys.spawn.service import spawn_from_config # Define the model seed configuration data seed_config = { 'templateName' : 'dcf-standard' , 'numForecastYears' : 3 , 'numHistoricalYears' : 2 , 'tickers' : [{ 'ticker' : 'SBUX' }, { 'ticker' : 'BYND' }] } spawned_models = spawn_from_config ( seed_config ) # Extract a list of modelID/tickers from the spawned model data models = [{ 'modelID' : p . model_id , 'ticker' : p . ticker } for p in spawned_models ] If the templateName is incorrectly entered (e.g., typo, or something that doesnt exist), a TemplateNotFoundException is thrown explaining TemplateNotFoundException: template not found for template_name: dcf-standard2 Below is a screenshot from a jupyter notebook of exactly this process, the output, and a printout of the models built information. Append tags to an existing model Tags can be added or appended to existing models; this assumes knowledge of the models uid . 1 2 3 4 5 6 7 8 9 10 11 # Import the append_tags function from the modeling service from valsys.modeling.service import append_tags # Define the models uid model_uid = \"0xe50deb\" # Define the tags to be appended to the model tags_to_append = [ \"t5\" , \"t4\" ] # Append the tags append_tags ( model_uid , tags_to_append ) Share a model The API allows a model to be shared to another user. This is done by referencing the modelsID, the email of the user the model is to be shared with, and the permissions that the user will have over the model. With a single user 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Import the share_model function from the modeling service from valsys.modeling.service import share_model # Import the permissions types from valsys.modeling.models import PermissionTypes # Define the models uid model_uid = \"0xe50deb\" # Define the email of the user the model is to be shared with email_to_share_to = \"jack.fuller@valsys.io\" # Define the permissions for the user permission = PermissionTypes . VIEW # Share the model share_model ( model_uid , email_to_share_to , permission = permission ) A model can only be shared with a given user once. Violating this will result in a ShareModelException . With multiple user and different permissions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Import the share_model function from the modeling service from valsys.modeling.service import share_model # Import the permissions types from valsys.modeling.models import PermissionTypes # Define the models uid model_uid = \"0xe50deb\" # Define the list of emails of the users the model is to be shared with; # note that we are allowed to put different permissions per user. users = [ ( \"jack.fuller@valsys.io\" , PermissionTypes . VIEW ), ( \"simon.bessey@valsys.io\" , PermissionTypes . EDIT ) ] # Share the model for email , permission in users : share_model ( model_uid , email , permission = permission ) Obtain module information for a model It will be common to need module information: for example, moduleIDs. This workflow shows how to obtain the module meta data for a model. Crucially, this shows the module hierarchy, as well as the module IDs and names. 1 2 3 4 5 6 7 from valsys.modeling.service import pull_model_information , pull_case model_uid = \"0xe50deb\" first_case_info = pull_model_information ( model_uid ) . first case = pull_case ( first_case_info . uid ) module_info = case . module_meta will result in module_info being something like 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 [ { \"name\" : \"DCF\" , \"uid\" : \"0xe50c46\" , \"children\" : [ { \"name\" : \"Balance Sheet\" , \"uid\" : \"0xe50dbd\" , \"children\" : [ { \"name\" : \"Equity\" , \"uid\" : \"0xe50cd3\" , \"children\" : [] }, { \"name\" : \"Liabilities\" , \"uid\" : \"0xe50d22\" , \"children\" : [] }, ] }, { \"name\" : \"DCF Drivers\" , \"uid\" : \"0xe50fe6\" , \"children\" : [] }, { \"name\" : \"Income Statement\" , \"uid\" : \"0xe510a8\" , \"children\" : [ { \"name\" : \"Earnings Per Share\" , \"uid\" : \"0xe50c5f\" , \"children\" : [] }, { \"name\" : \"Operating Income\" , \"uid\" : \"0xe50cf8\" , \"children\" : [] }, ] }, { \"name\" : \"Cash Flow statement\" , \"uid\" : \"0xe51235\" , \"children\" : [ { \"name\" : \"Cash Flow From Operating Activities\" , \"uid\" : \"0xe50c1b\" , \"children\" : [] } ] } ] } ] Note that the nested structure highlights the modules parent-child relationship. Each modules name , uid , and children modules are returned. Add child module to existing module Adding a child module requires knowledge of the parent modules uid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Import the add_child_module function from the modeling service from valsys.modeling.service import add_child_module , pull_model_information # Define the model id model_id = '0xe50deb' # Define the id of the parent module parent_module_id = '0xe51235' # Define the name of the new module new_module_name = 'new module' # Go get the case uid for the model case_id = pull_model_information ( model_id ) . first . uid # Use the above data to add a child module new_module = add_child_module ( parent_module_id = parent_module_id , name = new_module_name , model_id = model_id , case_id = case_id ) Add line item to a module This workflow allows a line item to be added to an existing module; it requires knowledge of the modelID , and moduleID . One must provide the name of the new line item, and the order of the line item in the module. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Import the add_line_item function from the modeling service from valsys.modeling.service import add_line_item , pull_model_information # Define the modelID model_id = '0xe50deb' # Define the module ID of the module the line item is to be added to module_id = '0xe51235' # Define the name of the new line item line_item_name = 'new line item' # Define the order in the module of the new line item line_item_order = 10 # Get the caseID from the modelID case_id = pull_model_information ( model_id ) . first . uid # Add the new line item, which returns a new line line object. new_line_item = add_line_item ( model_id = model_id , case_id = case_id , module_id = module_id , name = line_item_name , order = line_item_order ) Note that adding the same line item multiple times will result in an error.","title":"Workflow examples"},{"location":"workflowExamples/#workflow-examples","text":"This is a collection of examples of how to use the Valsys library..","title":"Workflow examples"},{"location":"workflowExamples/#spawn-a-model","text":"This workflow allows a model to be spawned from a template. In the below example, we show how to spawn a SBUX model and obtain its model uid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Import the spawn_model function from the spawn service from valsys.spawn.service import spawn_from_config # Define the model seed configuration data seed_config = { 'templateName' : 'dcf-standard' , 'numForecastYears' : 3 , 'numHistoricalYears' : 2 , 'tickers' : [{ 'ticker' : 'SBUX' }, { 'ticker' : 'BYND' }] } spawned_models = spawn_from_config ( seed_config ) # Extract a list of modelID/tickers from the spawned model data models = [{ 'modelID' : p . model_id , 'ticker' : p . ticker } for p in spawned_models ] If the templateName is incorrectly entered (e.g., typo, or something that doesnt exist), a TemplateNotFoundException is thrown explaining TemplateNotFoundException: template not found for template_name: dcf-standard2 Below is a screenshot from a jupyter notebook of exactly this process, the output, and a printout of the models built information.","title":"Spawn a model"},{"location":"workflowExamples/#append-tags-to-an-existing-model","text":"Tags can be added or appended to existing models; this assumes knowledge of the models uid . 1 2 3 4 5 6 7 8 9 10 11 # Import the append_tags function from the modeling service from valsys.modeling.service import append_tags # Define the models uid model_uid = \"0xe50deb\" # Define the tags to be appended to the model tags_to_append = [ \"t5\" , \"t4\" ] # Append the tags append_tags ( model_uid , tags_to_append )","title":"Append tags to an existing model"},{"location":"workflowExamples/#share-a-model","text":"The API allows a model to be shared to another user. This is done by referencing the modelsID, the email of the user the model is to be shared with, and the permissions that the user will have over the model.","title":"Share a model"},{"location":"workflowExamples/#with-a-single-user","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Import the share_model function from the modeling service from valsys.modeling.service import share_model # Import the permissions types from valsys.modeling.models import PermissionTypes # Define the models uid model_uid = \"0xe50deb\" # Define the email of the user the model is to be shared with email_to_share_to = \"jack.fuller@valsys.io\" # Define the permissions for the user permission = PermissionTypes . VIEW # Share the model share_model ( model_uid , email_to_share_to , permission = permission ) A model can only be shared with a given user once. Violating this will result in a ShareModelException .","title":"With a single user"},{"location":"workflowExamples/#with-multiple-user-and-different-permissions","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Import the share_model function from the modeling service from valsys.modeling.service import share_model # Import the permissions types from valsys.modeling.models import PermissionTypes # Define the models uid model_uid = \"0xe50deb\" # Define the list of emails of the users the model is to be shared with; # note that we are allowed to put different permissions per user. users = [ ( \"jack.fuller@valsys.io\" , PermissionTypes . VIEW ), ( \"simon.bessey@valsys.io\" , PermissionTypes . EDIT ) ] # Share the model for email , permission in users : share_model ( model_uid , email , permission = permission )","title":"With multiple user and different permissions"},{"location":"workflowExamples/#obtain-module-information-for-a-model","text":"It will be common to need module information: for example, moduleIDs. This workflow shows how to obtain the module meta data for a model. Crucially, this shows the module hierarchy, as well as the module IDs and names. 1 2 3 4 5 6 7 from valsys.modeling.service import pull_model_information , pull_case model_uid = \"0xe50deb\" first_case_info = pull_model_information ( model_uid ) . first case = pull_case ( first_case_info . uid ) module_info = case . module_meta will result in module_info being something like 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 [ { \"name\" : \"DCF\" , \"uid\" : \"0xe50c46\" , \"children\" : [ { \"name\" : \"Balance Sheet\" , \"uid\" : \"0xe50dbd\" , \"children\" : [ { \"name\" : \"Equity\" , \"uid\" : \"0xe50cd3\" , \"children\" : [] }, { \"name\" : \"Liabilities\" , \"uid\" : \"0xe50d22\" , \"children\" : [] }, ] }, { \"name\" : \"DCF Drivers\" , \"uid\" : \"0xe50fe6\" , \"children\" : [] }, { \"name\" : \"Income Statement\" , \"uid\" : \"0xe510a8\" , \"children\" : [ { \"name\" : \"Earnings Per Share\" , \"uid\" : \"0xe50c5f\" , \"children\" : [] }, { \"name\" : \"Operating Income\" , \"uid\" : \"0xe50cf8\" , \"children\" : [] }, ] }, { \"name\" : \"Cash Flow statement\" , \"uid\" : \"0xe51235\" , \"children\" : [ { \"name\" : \"Cash Flow From Operating Activities\" , \"uid\" : \"0xe50c1b\" , \"children\" : [] } ] } ] } ] Note that the nested structure highlights the modules parent-child relationship. Each modules name , uid , and children modules are returned.","title":"Obtain module information for a model"},{"location":"workflowExamples/#add-child-module-to-existing-module","text":"Adding a child module requires knowledge of the parent modules uid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Import the add_child_module function from the modeling service from valsys.modeling.service import add_child_module , pull_model_information # Define the model id model_id = '0xe50deb' # Define the id of the parent module parent_module_id = '0xe51235' # Define the name of the new module new_module_name = 'new module' # Go get the case uid for the model case_id = pull_model_information ( model_id ) . first . uid # Use the above data to add a child module new_module = add_child_module ( parent_module_id = parent_module_id , name = new_module_name , model_id = model_id , case_id = case_id )","title":"Add child module to existing module"},{"location":"workflowExamples/#add-line-item-to-a-module","text":"This workflow allows a line item to be added to an existing module; it requires knowledge of the modelID , and moduleID . One must provide the name of the new line item, and the order of the line item in the module. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Import the add_line_item function from the modeling service from valsys.modeling.service import add_line_item , pull_model_information # Define the modelID model_id = '0xe50deb' # Define the module ID of the module the line item is to be added to module_id = '0xe51235' # Define the name of the new line item line_item_name = 'new line item' # Define the order in the module of the new line item line_item_order = 10 # Get the caseID from the modelID case_id = pull_model_information ( model_id ) . first . uid # Add the new line item, which returns a new line line object. new_line_item = add_line_item ( model_id = model_id , case_id = case_id , module_id = module_id , name = line_item_name , order = line_item_order ) Note that adding the same line item multiple times will result in an error.","title":"Add line item to a module"}]}